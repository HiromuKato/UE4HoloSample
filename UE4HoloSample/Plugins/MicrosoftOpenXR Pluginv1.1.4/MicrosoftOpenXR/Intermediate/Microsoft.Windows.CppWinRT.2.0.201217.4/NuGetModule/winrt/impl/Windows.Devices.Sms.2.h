// WARNING: Please don't edit this file. It was generated by C++/WinRT v2.0.201217.4

#ifndef WINRT_Windows_Devices_Sms_2_H
#define WINRT_Windows_Devices_Sms_2_H
#include "winrt/impl/Windows.Devices.Sms.1.h"
WINRT_EXPORT namespace winrt::Windows::Devices::Sms
{
    struct SmsEncodedLength
    {
        uint32_t SegmentCount;
        uint32_t CharacterCountLastSegment;
        uint32_t CharactersPerSegment;
        uint32_t ByteCountLastSegment;
        uint32_t BytesPerSegment;
    };
    inline bool operator==(SmsEncodedLength const& left, SmsEncodedLength const& right) noexcept
    {
        return left.SegmentCount == right.SegmentCount && left.CharacterCountLastSegment == right.CharacterCountLastSegment && left.CharactersPerSegment == right.CharactersPerSegment && left.ByteCountLastSegment == right.ByteCountLastSegment && left.BytesPerSegment == right.BytesPerSegment;
    }
    inline bool operator!=(SmsEncodedLength const& left, SmsEncodedLength const& right) noexcept
    {
        return !(left == right);
    }
    struct __declspec(empty_bases) SmsAppMessage : Windows::Devices::Sms::ISmsAppMessage
    {
        SmsAppMessage(std::nullptr_t) noexcept {}
        SmsAppMessage(void* ptr, take_ownership_from_abi_t) noexcept : Windows::Devices::Sms::ISmsAppMessage(ptr, take_ownership_from_abi) {}
        SmsAppMessage();
        SmsAppMessage(SmsAppMessage const&) noexcept = default;
        SmsAppMessage(SmsAppMessage&&) noexcept = default;
        SmsAppMessage& operator=(SmsAppMessage const&) & noexcept = default;
        SmsAppMessage& operator=(SmsAppMessage&&) & noexcept = default;
    };
    struct __declspec(empty_bases) SmsBroadcastMessage : Windows::Devices::Sms::ISmsBroadcastMessage
    {
        SmsBroadcastMessage(std::nullptr_t) noexcept {}
        SmsBroadcastMessage(void* ptr, take_ownership_from_abi_t) noexcept : Windows::Devices::Sms::ISmsBroadcastMessage(ptr, take_ownership_from_abi) {}
        SmsBroadcastMessage(SmsBroadcastMessage const&) noexcept = default;
        SmsBroadcastMessage(SmsBroadcastMessage&&) noexcept = default;
        SmsBroadcastMessage& operator=(SmsBroadcastMessage const&) & noexcept = default;
        SmsBroadcastMessage& operator=(SmsBroadcastMessage&&) & noexcept = default;
    };
    struct __declspec(empty_bases) SmsDevice2 : Windows::Devices::Sms::ISmsDevice2
    {
        SmsDevice2(std::nullptr_t) noexcept {}
        SmsDevice2(void* ptr, take_ownership_from_abi_t) noexcept : Windows::Devices::Sms::ISmsDevice2(ptr, take_ownership_from_abi) {}
        SmsDevice2(SmsDevice2 const&) noexcept = default;
        SmsDevice2(SmsDevice2&&) noexcept = default;
        SmsDevice2& operator=(SmsDevice2 const&) & noexcept = default;
        SmsDevice2& operator=(SmsDevice2&&) & noexcept = default;
        static auto GetDeviceSelector();
        static auto FromId(param::hstring const& deviceId);
        static auto GetDefault();
        static auto FromParentId(param::hstring const& parentDeviceId);
    };
    struct __declspec(empty_bases) SmsFilterRule : Windows::Devices::Sms::ISmsFilterRule
    {
        SmsFilterRule(std::nullptr_t) noexcept {}
        SmsFilterRule(void* ptr, take_ownership_from_abi_t) noexcept : Windows::Devices::Sms::ISmsFilterRule(ptr, take_ownership_from_abi) {}
        explicit SmsFilterRule(Windows::Devices::Sms::SmsMessageType const& messageType);
        SmsFilterRule(SmsFilterRule const&) noexcept = default;
        SmsFilterRule(SmsFilterRule&&) noexcept = default;
        SmsFilterRule& operator=(SmsFilterRule const&) & noexcept = default;
        SmsFilterRule& operator=(SmsFilterRule&&) & noexcept = default;
    };
    struct __declspec(empty_bases) SmsFilterRules : Windows::Devices::Sms::ISmsFilterRules
    {
        SmsFilterRules(std::nullptr_t) noexcept {}
        SmsFilterRules(void* ptr, take_ownership_from_abi_t) noexcept : Windows::Devices::Sms::ISmsFilterRules(ptr, take_ownership_from_abi) {}
        explicit SmsFilterRules(Windows::Devices::Sms::SmsFilterActionType const& actionType);
        SmsFilterRules(SmsFilterRules const&) noexcept = default;
        SmsFilterRules(SmsFilterRules&&) noexcept = default;
        SmsFilterRules& operator=(SmsFilterRules const&) & noexcept = default;
        SmsFilterRules& operator=(SmsFilterRules&&) & noexcept = default;
    };
    struct __declspec(empty_bases) SmsMessageReceivedTriggerDetails : Windows::Devices::Sms::ISmsMessageReceivedTriggerDetails
    {
        SmsMessageReceivedTriggerDetails(std::nullptr_t) noexcept {}
        SmsMessageReceivedTriggerDetails(void* ptr, take_ownership_from_abi_t) noexcept : Windows::Devices::Sms::ISmsMessageReceivedTriggerDetails(ptr, take_ownership_from_abi) {}
        SmsMessageReceivedTriggerDetails(SmsMessageReceivedTriggerDetails const&) noexcept = default;
        SmsMessageReceivedTriggerDetails(SmsMessageReceivedTriggerDetails&&) noexcept = default;
        SmsMessageReceivedTriggerDetails& operator=(SmsMessageReceivedTriggerDetails const&) & noexcept = default;
        SmsMessageReceivedTriggerDetails& operator=(SmsMessageReceivedTriggerDetails&&) & noexcept = default;
    };
    struct __declspec(empty_bases) SmsMessageRegistration : Windows::Devices::Sms::ISmsMessageRegistration
    {
        SmsMessageRegistration(std::nullptr_t) noexcept {}
        SmsMessageRegistration(void* ptr, take_ownership_from_abi_t) noexcept : Windows::Devices::Sms::ISmsMessageRegistration(ptr, take_ownership_from_abi) {}
        SmsMessageRegistration(SmsMessageRegistration const&) noexcept = default;
        SmsMessageRegistration(SmsMessageRegistration&&) noexcept = default;
        SmsMessageRegistration& operator=(SmsMessageRegistration const&) & noexcept = default;
        SmsMessageRegistration& operator=(SmsMessageRegistration&&) & noexcept = default;
        [[nodiscard]] static auto AllRegistrations();
        static auto Register(param::hstring const& id, Windows::Devices::Sms::SmsFilterRules const& filterRules);
    };
    struct __declspec(empty_bases) SmsSendMessageResult : Windows::Devices::Sms::ISmsSendMessageResult
    {
        SmsSendMessageResult(std::nullptr_t) noexcept {}
        SmsSendMessageResult(void* ptr, take_ownership_from_abi_t) noexcept : Windows::Devices::Sms::ISmsSendMessageResult(ptr, take_ownership_from_abi) {}
        SmsSendMessageResult(SmsSendMessageResult const&) noexcept = default;
        SmsSendMessageResult(SmsSendMessageResult&&) noexcept = default;
        SmsSendMessageResult& operator=(SmsSendMessageResult const&) & noexcept = default;
        SmsSendMessageResult& operator=(SmsSendMessageResult&&) & noexcept = default;
    };
    struct __declspec(empty_bases) SmsStatusMessage : Windows::Devices::Sms::ISmsStatusMessage
    {
        SmsStatusMessage(std::nullptr_t) noexcept {}
        SmsStatusMessage(void* ptr, take_ownership_from_abi_t) noexcept : Windows::Devices::Sms::ISmsStatusMessage(ptr, take_ownership_from_abi) {}
        SmsStatusMessage(SmsStatusMessage const&) noexcept = default;
        SmsStatusMessage(SmsStatusMessage&&) noexcept = default;
        SmsStatusMessage& operator=(SmsStatusMessage const&) & noexcept = default;
        SmsStatusMessage& operator=(SmsStatusMessage&&) & noexcept = default;
    };
    struct __declspec(empty_bases) SmsTextMessage2 : Windows::Devices::Sms::ISmsTextMessage2
    {
        SmsTextMessage2(std::nullptr_t) noexcept {}
        SmsTextMessage2(void* ptr, take_ownership_from_abi_t) noexcept : Windows::Devices::Sms::ISmsTextMessage2(ptr, take_ownership_from_abi) {}
        SmsTextMessage2();
        SmsTextMessage2(SmsTextMessage2 const&) noexcept = default;
        SmsTextMessage2(SmsTextMessage2&&) noexcept = default;
        SmsTextMessage2& operator=(SmsTextMessage2 const&) & noexcept = default;
        SmsTextMessage2& operator=(SmsTextMessage2&&) & noexcept = default;
    };
    struct __declspec(empty_bases) SmsVoicemailMessage : Windows::Devices::Sms::ISmsVoicemailMessage
    {
        SmsVoicemailMessage(std::nullptr_t) noexcept {}
        SmsVoicemailMessage(void* ptr, take_ownership_from_abi_t) noexcept : Windows::Devices::Sms::ISmsVoicemailMessage(ptr, take_ownership_from_abi) {}
        SmsVoicemailMessage(SmsVoicemailMessage const&) noexcept = default;
        SmsVoicemailMessage(SmsVoicemailMessage&&) noexcept = default;
        SmsVoicemailMessage& operator=(SmsVoicemailMessage const&) & noexcept = default;
        SmsVoicemailMessage& operator=(SmsVoicemailMessage&&) & noexcept = default;
    };
    struct __declspec(empty_bases) SmsWapMessage : Windows::Devices::Sms::ISmsWapMessage
    {
        SmsWapMessage(std::nullptr_t) noexcept {}
        SmsWapMessage(void* ptr, take_ownership_from_abi_t) noexcept : Windows::Devices::Sms::ISmsWapMessage(ptr, take_ownership_from_abi) {}
        SmsWapMessage(SmsWapMessage const&) noexcept = default;
        SmsWapMessage(SmsWapMessage&&) noexcept = default;
        SmsWapMessage& operator=(SmsWapMessage const&) & noexcept = default;
        SmsWapMessage& operator=(SmsWapMessage&&) & noexcept = default;
    };
}
#endif
