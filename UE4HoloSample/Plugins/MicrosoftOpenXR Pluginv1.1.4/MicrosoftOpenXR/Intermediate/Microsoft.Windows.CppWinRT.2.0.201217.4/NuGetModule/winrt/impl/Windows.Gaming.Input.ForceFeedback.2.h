// WARNING: Please don't edit this file. It was generated by C++/WinRT v2.0.201217.4

#ifndef WINRT_Windows_Gaming_Input_ForceFeedback_2_H
#define WINRT_Windows_Gaming_Input_ForceFeedback_2_H
#include "winrt/impl/Windows.Gaming.Input.ForceFeedback.1.h"
WINRT_EXPORT namespace winrt::Windows::Gaming::Input::ForceFeedback
{
    struct __declspec(empty_bases) ConditionForceEffect : Windows::Gaming::Input::ForceFeedback::IForceFeedbackEffect,
        impl::require<ConditionForceEffect, Windows::Gaming::Input::ForceFeedback::IConditionForceEffect>
    {
        ConditionForceEffect(std::nullptr_t) noexcept {}
        ConditionForceEffect(void* ptr, take_ownership_from_abi_t) noexcept : Windows::Gaming::Input::ForceFeedback::IForceFeedbackEffect(ptr, take_ownership_from_abi) {}
        explicit ConditionForceEffect(Windows::Gaming::Input::ForceFeedback::ConditionForceEffectKind const& effectKind);
        ConditionForceEffect(ConditionForceEffect const&) noexcept = default;
        ConditionForceEffect(ConditionForceEffect&&) noexcept = default;
        ConditionForceEffect& operator=(ConditionForceEffect const&) & noexcept = default;
        ConditionForceEffect& operator=(ConditionForceEffect&&) & noexcept = default;
    };
    struct __declspec(empty_bases) ConstantForceEffect : Windows::Gaming::Input::ForceFeedback::IForceFeedbackEffect,
        impl::require<ConstantForceEffect, Windows::Gaming::Input::ForceFeedback::IConstantForceEffect>
    {
        ConstantForceEffect(std::nullptr_t) noexcept {}
        ConstantForceEffect(void* ptr, take_ownership_from_abi_t) noexcept : Windows::Gaming::Input::ForceFeedback::IForceFeedbackEffect(ptr, take_ownership_from_abi) {}
        ConstantForceEffect();
        ConstantForceEffect(ConstantForceEffect const&) noexcept = default;
        ConstantForceEffect(ConstantForceEffect&&) noexcept = default;
        ConstantForceEffect& operator=(ConstantForceEffect const&) & noexcept = default;
        ConstantForceEffect& operator=(ConstantForceEffect&&) & noexcept = default;
    };
    struct __declspec(empty_bases) ForceFeedbackMotor : Windows::Gaming::Input::ForceFeedback::IForceFeedbackMotor
    {
        ForceFeedbackMotor(std::nullptr_t) noexcept {}
        ForceFeedbackMotor(void* ptr, take_ownership_from_abi_t) noexcept : Windows::Gaming::Input::ForceFeedback::IForceFeedbackMotor(ptr, take_ownership_from_abi) {}
        ForceFeedbackMotor(ForceFeedbackMotor const&) noexcept = default;
        ForceFeedbackMotor(ForceFeedbackMotor&&) noexcept = default;
        ForceFeedbackMotor& operator=(ForceFeedbackMotor const&) & noexcept = default;
        ForceFeedbackMotor& operator=(ForceFeedbackMotor&&) & noexcept = default;
    };
    struct __declspec(empty_bases) PeriodicForceEffect : Windows::Gaming::Input::ForceFeedback::IForceFeedbackEffect,
        impl::require<PeriodicForceEffect, Windows::Gaming::Input::ForceFeedback::IPeriodicForceEffect>
    {
        PeriodicForceEffect(std::nullptr_t) noexcept {}
        PeriodicForceEffect(void* ptr, take_ownership_from_abi_t) noexcept : Windows::Gaming::Input::ForceFeedback::IForceFeedbackEffect(ptr, take_ownership_from_abi) {}
        explicit PeriodicForceEffect(Windows::Gaming::Input::ForceFeedback::PeriodicForceEffectKind const& effectKind);
        PeriodicForceEffect(PeriodicForceEffect const&) noexcept = default;
        PeriodicForceEffect(PeriodicForceEffect&&) noexcept = default;
        PeriodicForceEffect& operator=(PeriodicForceEffect const&) & noexcept = default;
        PeriodicForceEffect& operator=(PeriodicForceEffect&&) & noexcept = default;
    };
    struct __declspec(empty_bases) RampForceEffect : Windows::Gaming::Input::ForceFeedback::IForceFeedbackEffect,
        impl::require<RampForceEffect, Windows::Gaming::Input::ForceFeedback::IRampForceEffect>
    {
        RampForceEffect(std::nullptr_t) noexcept {}
        RampForceEffect(void* ptr, take_ownership_from_abi_t) noexcept : Windows::Gaming::Input::ForceFeedback::IForceFeedbackEffect(ptr, take_ownership_from_abi) {}
        RampForceEffect();
        RampForceEffect(RampForceEffect const&) noexcept = default;
        RampForceEffect(RampForceEffect&&) noexcept = default;
        RampForceEffect& operator=(RampForceEffect const&) & noexcept = default;
        RampForceEffect& operator=(RampForceEffect&&) & noexcept = default;
    };
}
#endif
