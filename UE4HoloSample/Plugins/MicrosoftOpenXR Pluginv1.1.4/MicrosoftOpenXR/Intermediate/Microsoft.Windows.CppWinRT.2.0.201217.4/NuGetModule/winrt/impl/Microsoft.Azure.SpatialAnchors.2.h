// WARNING: Please don't edit this file. It was generated by C++/WinRT v2.0.201217.4

#ifndef WINRT_Microsoft_Azure_SpatialAnchors_2_H
#define WINRT_Microsoft_Azure_SpatialAnchors_2_H
#include "winrt/impl/Windows.Foundation.1.h"
#include "winrt/impl/Microsoft.Azure.SpatialAnchors.1.h"
WINRT_EXPORT namespace winrt::Microsoft::Azure::SpatialAnchors
{
    struct AnchorLocatedDelegate : Windows::Foundation::IUnknown
    {
        AnchorLocatedDelegate(std::nullptr_t = nullptr) noexcept {}
        AnchorLocatedDelegate(void* ptr, take_ownership_from_abi_t) noexcept : Windows::Foundation::IUnknown(ptr, take_ownership_from_abi) {}
        AnchorLocatedDelegate(AnchorLocatedDelegate const&) noexcept = default;
        AnchorLocatedDelegate(AnchorLocatedDelegate&&) noexcept = default;
        AnchorLocatedDelegate& operator=(AnchorLocatedDelegate const&) & noexcept = default;
        AnchorLocatedDelegate& operator=(AnchorLocatedDelegate&&) & noexcept = default;
        template <typename L> AnchorLocatedDelegate(L lambda);
        template <typename F> AnchorLocatedDelegate(F* function);
        template <typename O, typename M> AnchorLocatedDelegate(O* object, M method);
        template <typename O, typename M> AnchorLocatedDelegate(com_ptr<O>&& object, M method);
        template <typename O, typename M> AnchorLocatedDelegate(weak_ref<O>&& object, M method);
        auto operator()(Windows::Foundation::IInspectable const& sender, Microsoft::Azure::SpatialAnchors::AnchorLocatedEventArgs const& args) const;
    };
    struct LocateAnchorsCompletedDelegate : Windows::Foundation::IUnknown
    {
        LocateAnchorsCompletedDelegate(std::nullptr_t = nullptr) noexcept {}
        LocateAnchorsCompletedDelegate(void* ptr, take_ownership_from_abi_t) noexcept : Windows::Foundation::IUnknown(ptr, take_ownership_from_abi) {}
        LocateAnchorsCompletedDelegate(LocateAnchorsCompletedDelegate const&) noexcept = default;
        LocateAnchorsCompletedDelegate(LocateAnchorsCompletedDelegate&&) noexcept = default;
        LocateAnchorsCompletedDelegate& operator=(LocateAnchorsCompletedDelegate const&) & noexcept = default;
        LocateAnchorsCompletedDelegate& operator=(LocateAnchorsCompletedDelegate&&) & noexcept = default;
        template <typename L> LocateAnchorsCompletedDelegate(L lambda);
        template <typename F> LocateAnchorsCompletedDelegate(F* function);
        template <typename O, typename M> LocateAnchorsCompletedDelegate(O* object, M method);
        template <typename O, typename M> LocateAnchorsCompletedDelegate(com_ptr<O>&& object, M method);
        template <typename O, typename M> LocateAnchorsCompletedDelegate(weak_ref<O>&& object, M method);
        auto operator()(Windows::Foundation::IInspectable const& sender, Microsoft::Azure::SpatialAnchors::LocateAnchorsCompletedEventArgs const& args) const;
    };
    struct OnLogDebugDelegate : Windows::Foundation::IUnknown
    {
        OnLogDebugDelegate(std::nullptr_t = nullptr) noexcept {}
        OnLogDebugDelegate(void* ptr, take_ownership_from_abi_t) noexcept : Windows::Foundation::IUnknown(ptr, take_ownership_from_abi) {}
        OnLogDebugDelegate(OnLogDebugDelegate const&) noexcept = default;
        OnLogDebugDelegate(OnLogDebugDelegate&&) noexcept = default;
        OnLogDebugDelegate& operator=(OnLogDebugDelegate const&) & noexcept = default;
        OnLogDebugDelegate& operator=(OnLogDebugDelegate&&) & noexcept = default;
        template <typename L> OnLogDebugDelegate(L lambda);
        template <typename F> OnLogDebugDelegate(F* function);
        template <typename O, typename M> OnLogDebugDelegate(O* object, M method);
        template <typename O, typename M> OnLogDebugDelegate(com_ptr<O>&& object, M method);
        template <typename O, typename M> OnLogDebugDelegate(weak_ref<O>&& object, M method);
        auto operator()(Windows::Foundation::IInspectable const& sender, Microsoft::Azure::SpatialAnchors::OnLogDebugEventArgs const& args) const;
    };
    struct SessionErrorDelegate : Windows::Foundation::IUnknown
    {
        SessionErrorDelegate(std::nullptr_t = nullptr) noexcept {}
        SessionErrorDelegate(void* ptr, take_ownership_from_abi_t) noexcept : Windows::Foundation::IUnknown(ptr, take_ownership_from_abi) {}
        SessionErrorDelegate(SessionErrorDelegate const&) noexcept = default;
        SessionErrorDelegate(SessionErrorDelegate&&) noexcept = default;
        SessionErrorDelegate& operator=(SessionErrorDelegate const&) & noexcept = default;
        SessionErrorDelegate& operator=(SessionErrorDelegate&&) & noexcept = default;
        template <typename L> SessionErrorDelegate(L lambda);
        template <typename F> SessionErrorDelegate(F* function);
        template <typename O, typename M> SessionErrorDelegate(O* object, M method);
        template <typename O, typename M> SessionErrorDelegate(com_ptr<O>&& object, M method);
        template <typename O, typename M> SessionErrorDelegate(weak_ref<O>&& object, M method);
        auto operator()(Windows::Foundation::IInspectable const& sender, Microsoft::Azure::SpatialAnchors::SessionErrorEventArgs const& args) const;
    };
    struct SessionUpdatedDelegate : Windows::Foundation::IUnknown
    {
        SessionUpdatedDelegate(std::nullptr_t = nullptr) noexcept {}
        SessionUpdatedDelegate(void* ptr, take_ownership_from_abi_t) noexcept : Windows::Foundation::IUnknown(ptr, take_ownership_from_abi) {}
        SessionUpdatedDelegate(SessionUpdatedDelegate const&) noexcept = default;
        SessionUpdatedDelegate(SessionUpdatedDelegate&&) noexcept = default;
        SessionUpdatedDelegate& operator=(SessionUpdatedDelegate const&) & noexcept = default;
        SessionUpdatedDelegate& operator=(SessionUpdatedDelegate&&) & noexcept = default;
        template <typename L> SessionUpdatedDelegate(L lambda);
        template <typename F> SessionUpdatedDelegate(F* function);
        template <typename O, typename M> SessionUpdatedDelegate(O* object, M method);
        template <typename O, typename M> SessionUpdatedDelegate(com_ptr<O>&& object, M method);
        template <typename O, typename M> SessionUpdatedDelegate(weak_ref<O>&& object, M method);
        auto operator()(Windows::Foundation::IInspectable const& sender, Microsoft::Azure::SpatialAnchors::SessionUpdatedEventArgs const& args) const;
    };
    struct TokenRequiredDelegate : Windows::Foundation::IUnknown
    {
        TokenRequiredDelegate(std::nullptr_t = nullptr) noexcept {}
        TokenRequiredDelegate(void* ptr, take_ownership_from_abi_t) noexcept : Windows::Foundation::IUnknown(ptr, take_ownership_from_abi) {}
        TokenRequiredDelegate(TokenRequiredDelegate const&) noexcept = default;
        TokenRequiredDelegate(TokenRequiredDelegate&&) noexcept = default;
        TokenRequiredDelegate& operator=(TokenRequiredDelegate const&) & noexcept = default;
        TokenRequiredDelegate& operator=(TokenRequiredDelegate&&) & noexcept = default;
        template <typename L> TokenRequiredDelegate(L lambda);
        template <typename F> TokenRequiredDelegate(F* function);
        template <typename O, typename M> TokenRequiredDelegate(O* object, M method);
        template <typename O, typename M> TokenRequiredDelegate(com_ptr<O>&& object, M method);
        template <typename O, typename M> TokenRequiredDelegate(weak_ref<O>&& object, M method);
        auto operator()(Windows::Foundation::IInspectable const& sender, Microsoft::Azure::SpatialAnchors::TokenRequiredEventArgs const& args) const;
    };
    struct UpdatedSensorFingerprintRequiredDelegate : Windows::Foundation::IUnknown
    {
        UpdatedSensorFingerprintRequiredDelegate(std::nullptr_t = nullptr) noexcept {}
        UpdatedSensorFingerprintRequiredDelegate(void* ptr, take_ownership_from_abi_t) noexcept : Windows::Foundation::IUnknown(ptr, take_ownership_from_abi) {}
        UpdatedSensorFingerprintRequiredDelegate(UpdatedSensorFingerprintRequiredDelegate const&) noexcept = default;
        UpdatedSensorFingerprintRequiredDelegate(UpdatedSensorFingerprintRequiredDelegate&&) noexcept = default;
        UpdatedSensorFingerprintRequiredDelegate& operator=(UpdatedSensorFingerprintRequiredDelegate const&) & noexcept = default;
        UpdatedSensorFingerprintRequiredDelegate& operator=(UpdatedSensorFingerprintRequiredDelegate&&) & noexcept = default;
        template <typename L> UpdatedSensorFingerprintRequiredDelegate(L lambda);
        template <typename F> UpdatedSensorFingerprintRequiredDelegate(F* function);
        template <typename O, typename M> UpdatedSensorFingerprintRequiredDelegate(O* object, M method);
        template <typename O, typename M> UpdatedSensorFingerprintRequiredDelegate(com_ptr<O>&& object, M method);
        template <typename O, typename M> UpdatedSensorFingerprintRequiredDelegate(weak_ref<O>&& object, M method);
        auto operator()(Windows::Foundation::IInspectable const& sender, Microsoft::Azure::SpatialAnchors::SensorFingerprintEventArgs const& args) const;
    };
    struct __declspec(empty_bases) AnchorLocateCriteria : Microsoft::Azure::SpatialAnchors::IAnchorLocateCriteria
    {
        AnchorLocateCriteria(std::nullptr_t) noexcept {}
        AnchorLocateCriteria(void* ptr, take_ownership_from_abi_t) noexcept : Microsoft::Azure::SpatialAnchors::IAnchorLocateCriteria(ptr, take_ownership_from_abi) {}
        AnchorLocateCriteria();
        AnchorLocateCriteria(AnchorLocateCriteria const&) noexcept = default;
        AnchorLocateCriteria(AnchorLocateCriteria&&) noexcept = default;
        AnchorLocateCriteria& operator=(AnchorLocateCriteria const&) & noexcept = default;
        AnchorLocateCriteria& operator=(AnchorLocateCriteria&&) & noexcept = default;
    };
    struct __declspec(empty_bases) AnchorLocatedEventArgs : Microsoft::Azure::SpatialAnchors::IAnchorLocatedEventArgs
    {
        AnchorLocatedEventArgs(std::nullptr_t) noexcept {}
        AnchorLocatedEventArgs(void* ptr, take_ownership_from_abi_t) noexcept : Microsoft::Azure::SpatialAnchors::IAnchorLocatedEventArgs(ptr, take_ownership_from_abi) {}
        AnchorLocatedEventArgs(AnchorLocatedEventArgs const&) noexcept = default;
        AnchorLocatedEventArgs(AnchorLocatedEventArgs&&) noexcept = default;
        AnchorLocatedEventArgs& operator=(AnchorLocatedEventArgs const&) & noexcept = default;
        AnchorLocatedEventArgs& operator=(AnchorLocatedEventArgs&&) & noexcept = default;
    };
    struct __declspec(empty_bases) CloudSpatialAnchor : Microsoft::Azure::SpatialAnchors::ICloudSpatialAnchor
    {
        CloudSpatialAnchor(std::nullptr_t) noexcept {}
        CloudSpatialAnchor(void* ptr, take_ownership_from_abi_t) noexcept : Microsoft::Azure::SpatialAnchors::ICloudSpatialAnchor(ptr, take_ownership_from_abi) {}
        CloudSpatialAnchor();
        CloudSpatialAnchor(CloudSpatialAnchor const&) noexcept = default;
        CloudSpatialAnchor(CloudSpatialAnchor&&) noexcept = default;
        CloudSpatialAnchor& operator=(CloudSpatialAnchor const&) & noexcept = default;
        CloudSpatialAnchor& operator=(CloudSpatialAnchor&&) & noexcept = default;
    };
    struct __declspec(empty_bases) CloudSpatialAnchorMap : Microsoft::Azure::SpatialAnchors::ICloudSpatialAnchorMap
    {
        CloudSpatialAnchorMap(std::nullptr_t) noexcept {}
        CloudSpatialAnchorMap(void* ptr, take_ownership_from_abi_t) noexcept : Microsoft::Azure::SpatialAnchors::ICloudSpatialAnchorMap(ptr, take_ownership_from_abi) {}
        CloudSpatialAnchorMap(CloudSpatialAnchorMap const&) noexcept = default;
        CloudSpatialAnchorMap(CloudSpatialAnchorMap&&) noexcept = default;
        CloudSpatialAnchorMap& operator=(CloudSpatialAnchorMap const&) & noexcept = default;
        CloudSpatialAnchorMap& operator=(CloudSpatialAnchorMap&&) & noexcept = default;
    };
    struct __declspec(empty_bases) CloudSpatialAnchorSession : Microsoft::Azure::SpatialAnchors::ICloudSpatialAnchorSession,
        impl::require<CloudSpatialAnchorSession, Windows::Foundation::IClosable>
    {
        CloudSpatialAnchorSession(std::nullptr_t) noexcept {}
        CloudSpatialAnchorSession(void* ptr, take_ownership_from_abi_t) noexcept : Microsoft::Azure::SpatialAnchors::ICloudSpatialAnchorSession(ptr, take_ownership_from_abi) {}
        CloudSpatialAnchorSession();
        CloudSpatialAnchorSession(CloudSpatialAnchorSession const&) noexcept = default;
        CloudSpatialAnchorSession(CloudSpatialAnchorSession&&) noexcept = default;
        CloudSpatialAnchorSession& operator=(CloudSpatialAnchorSession const&) & noexcept = default;
        CloudSpatialAnchorSession& operator=(CloudSpatialAnchorSession&&) & noexcept = default;
    };
    struct __declspec(empty_bases) CloudSpatialAnchorSessionDeferral : Microsoft::Azure::SpatialAnchors::ICloudSpatialAnchorSessionDeferral
    {
        CloudSpatialAnchorSessionDeferral(std::nullptr_t) noexcept {}
        CloudSpatialAnchorSessionDeferral(void* ptr, take_ownership_from_abi_t) noexcept : Microsoft::Azure::SpatialAnchors::ICloudSpatialAnchorSessionDeferral(ptr, take_ownership_from_abi) {}
        CloudSpatialAnchorSessionDeferral(CloudSpatialAnchorSessionDeferral const&) noexcept = default;
        CloudSpatialAnchorSessionDeferral(CloudSpatialAnchorSessionDeferral&&) noexcept = default;
        CloudSpatialAnchorSessionDeferral& operator=(CloudSpatialAnchorSessionDeferral const&) & noexcept = default;
        CloudSpatialAnchorSessionDeferral& operator=(CloudSpatialAnchorSessionDeferral&&) & noexcept = default;
    };
    struct __declspec(empty_bases) CloudSpatialAnchorSessionDiagnostics : Microsoft::Azure::SpatialAnchors::ICloudSpatialAnchorSessionDiagnostics
    {
        CloudSpatialAnchorSessionDiagnostics(std::nullptr_t) noexcept {}
        CloudSpatialAnchorSessionDiagnostics(void* ptr, take_ownership_from_abi_t) noexcept : Microsoft::Azure::SpatialAnchors::ICloudSpatialAnchorSessionDiagnostics(ptr, take_ownership_from_abi) {}
        CloudSpatialAnchorSessionDiagnostics(CloudSpatialAnchorSessionDiagnostics const&) noexcept = default;
        CloudSpatialAnchorSessionDiagnostics(CloudSpatialAnchorSessionDiagnostics&&) noexcept = default;
        CloudSpatialAnchorSessionDiagnostics& operator=(CloudSpatialAnchorSessionDiagnostics const&) & noexcept = default;
        CloudSpatialAnchorSessionDiagnostics& operator=(CloudSpatialAnchorSessionDiagnostics&&) & noexcept = default;
    };
    struct __declspec(empty_bases) CloudSpatialAnchorWatcher : Microsoft::Azure::SpatialAnchors::ICloudSpatialAnchorWatcher
    {
        CloudSpatialAnchorWatcher(std::nullptr_t) noexcept {}
        CloudSpatialAnchorWatcher(void* ptr, take_ownership_from_abi_t) noexcept : Microsoft::Azure::SpatialAnchors::ICloudSpatialAnchorWatcher(ptr, take_ownership_from_abi) {}
        CloudSpatialAnchorWatcher(CloudSpatialAnchorWatcher const&) noexcept = default;
        CloudSpatialAnchorWatcher(CloudSpatialAnchorWatcher&&) noexcept = default;
        CloudSpatialAnchorWatcher& operator=(CloudSpatialAnchorWatcher const&) & noexcept = default;
        CloudSpatialAnchorWatcher& operator=(CloudSpatialAnchorWatcher&&) & noexcept = default;
    };
    struct __declspec(empty_bases) GeoLocation : Microsoft::Azure::SpatialAnchors::IGeoLocation
    {
        GeoLocation(std::nullptr_t) noexcept {}
        GeoLocation(void* ptr, take_ownership_from_abi_t) noexcept : Microsoft::Azure::SpatialAnchors::IGeoLocation(ptr, take_ownership_from_abi) {}
        GeoLocation();
        GeoLocation(GeoLocation const&) noexcept = default;
        GeoLocation(GeoLocation&&) noexcept = default;
        GeoLocation& operator=(GeoLocation const&) & noexcept = default;
        GeoLocation& operator=(GeoLocation&&) & noexcept = default;
    };
    struct __declspec(empty_bases) LocateAnchorsCompletedEventArgs : Microsoft::Azure::SpatialAnchors::ILocateAnchorsCompletedEventArgs
    {
        LocateAnchorsCompletedEventArgs(std::nullptr_t) noexcept {}
        LocateAnchorsCompletedEventArgs(void* ptr, take_ownership_from_abi_t) noexcept : Microsoft::Azure::SpatialAnchors::ILocateAnchorsCompletedEventArgs(ptr, take_ownership_from_abi) {}
        LocateAnchorsCompletedEventArgs(LocateAnchorsCompletedEventArgs const&) noexcept = default;
        LocateAnchorsCompletedEventArgs(LocateAnchorsCompletedEventArgs&&) noexcept = default;
        LocateAnchorsCompletedEventArgs& operator=(LocateAnchorsCompletedEventArgs const&) & noexcept = default;
        LocateAnchorsCompletedEventArgs& operator=(LocateAnchorsCompletedEventArgs&&) & noexcept = default;
    };
    struct __declspec(empty_bases) NearAnchorCriteria : Microsoft::Azure::SpatialAnchors::INearAnchorCriteria
    {
        NearAnchorCriteria(std::nullptr_t) noexcept {}
        NearAnchorCriteria(void* ptr, take_ownership_from_abi_t) noexcept : Microsoft::Azure::SpatialAnchors::INearAnchorCriteria(ptr, take_ownership_from_abi) {}
        NearAnchorCriteria();
        NearAnchorCriteria(NearAnchorCriteria const&) noexcept = default;
        NearAnchorCriteria(NearAnchorCriteria&&) noexcept = default;
        NearAnchorCriteria& operator=(NearAnchorCriteria const&) & noexcept = default;
        NearAnchorCriteria& operator=(NearAnchorCriteria&&) & noexcept = default;
    };
    struct __declspec(empty_bases) NearDeviceCriteria : Microsoft::Azure::SpatialAnchors::INearDeviceCriteria
    {
        NearDeviceCriteria(std::nullptr_t) noexcept {}
        NearDeviceCriteria(void* ptr, take_ownership_from_abi_t) noexcept : Microsoft::Azure::SpatialAnchors::INearDeviceCriteria(ptr, take_ownership_from_abi) {}
        NearDeviceCriteria();
        NearDeviceCriteria(NearDeviceCriteria const&) noexcept = default;
        NearDeviceCriteria(NearDeviceCriteria&&) noexcept = default;
        NearDeviceCriteria& operator=(NearDeviceCriteria const&) & noexcept = default;
        NearDeviceCriteria& operator=(NearDeviceCriteria&&) & noexcept = default;
    };
    struct __declspec(empty_bases) OnLogDebugEventArgs : Microsoft::Azure::SpatialAnchors::IOnLogDebugEventArgs
    {
        OnLogDebugEventArgs(std::nullptr_t) noexcept {}
        OnLogDebugEventArgs(void* ptr, take_ownership_from_abi_t) noexcept : Microsoft::Azure::SpatialAnchors::IOnLogDebugEventArgs(ptr, take_ownership_from_abi) {}
        OnLogDebugEventArgs(OnLogDebugEventArgs const&) noexcept = default;
        OnLogDebugEventArgs(OnLogDebugEventArgs&&) noexcept = default;
        OnLogDebugEventArgs& operator=(OnLogDebugEventArgs const&) & noexcept = default;
        OnLogDebugEventArgs& operator=(OnLogDebugEventArgs&&) & noexcept = default;
    };
    struct __declspec(empty_bases) PlatformLocationProvider : Microsoft::Azure::SpatialAnchors::IPlatformLocationProvider
    {
        PlatformLocationProvider(std::nullptr_t) noexcept {}
        PlatformLocationProvider(void* ptr, take_ownership_from_abi_t) noexcept : Microsoft::Azure::SpatialAnchors::IPlatformLocationProvider(ptr, take_ownership_from_abi) {}
        PlatformLocationProvider();
        PlatformLocationProvider(PlatformLocationProvider const&) noexcept = default;
        PlatformLocationProvider(PlatformLocationProvider&&) noexcept = default;
        PlatformLocationProvider& operator=(PlatformLocationProvider const&) & noexcept = default;
        PlatformLocationProvider& operator=(PlatformLocationProvider&&) & noexcept = default;
    };
    struct __declspec(empty_bases) SensorCapabilities : Microsoft::Azure::SpatialAnchors::ISensorCapabilities
    {
        SensorCapabilities(std::nullptr_t) noexcept {}
        SensorCapabilities(void* ptr, take_ownership_from_abi_t) noexcept : Microsoft::Azure::SpatialAnchors::ISensorCapabilities(ptr, take_ownership_from_abi) {}
        SensorCapabilities(SensorCapabilities const&) noexcept = default;
        SensorCapabilities(SensorCapabilities&&) noexcept = default;
        SensorCapabilities& operator=(SensorCapabilities const&) & noexcept = default;
        SensorCapabilities& operator=(SensorCapabilities&&) & noexcept = default;
    };
    struct __declspec(empty_bases) SensorFingerprintEventArgs : Microsoft::Azure::SpatialAnchors::ISensorFingerprintEventArgs
    {
        SensorFingerprintEventArgs(std::nullptr_t) noexcept {}
        SensorFingerprintEventArgs(void* ptr, take_ownership_from_abi_t) noexcept : Microsoft::Azure::SpatialAnchors::ISensorFingerprintEventArgs(ptr, take_ownership_from_abi) {}
        SensorFingerprintEventArgs(SensorFingerprintEventArgs const&) noexcept = default;
        SensorFingerprintEventArgs(SensorFingerprintEventArgs&&) noexcept = default;
        SensorFingerprintEventArgs& operator=(SensorFingerprintEventArgs const&) & noexcept = default;
        SensorFingerprintEventArgs& operator=(SensorFingerprintEventArgs&&) & noexcept = default;
    };
    struct __declspec(empty_bases) SessionConfiguration : Microsoft::Azure::SpatialAnchors::ISessionConfiguration
    {
        SessionConfiguration(std::nullptr_t) noexcept {}
        SessionConfiguration(void* ptr, take_ownership_from_abi_t) noexcept : Microsoft::Azure::SpatialAnchors::ISessionConfiguration(ptr, take_ownership_from_abi) {}
        SessionConfiguration(SessionConfiguration const&) noexcept = default;
        SessionConfiguration(SessionConfiguration&&) noexcept = default;
        SessionConfiguration& operator=(SessionConfiguration const&) & noexcept = default;
        SessionConfiguration& operator=(SessionConfiguration&&) & noexcept = default;
    };
    struct __declspec(empty_bases) SessionErrorEventArgs : Microsoft::Azure::SpatialAnchors::ISessionErrorEventArgs
    {
        SessionErrorEventArgs(std::nullptr_t) noexcept {}
        SessionErrorEventArgs(void* ptr, take_ownership_from_abi_t) noexcept : Microsoft::Azure::SpatialAnchors::ISessionErrorEventArgs(ptr, take_ownership_from_abi) {}
        SessionErrorEventArgs(SessionErrorEventArgs const&) noexcept = default;
        SessionErrorEventArgs(SessionErrorEventArgs&&) noexcept = default;
        SessionErrorEventArgs& operator=(SessionErrorEventArgs const&) & noexcept = default;
        SessionErrorEventArgs& operator=(SessionErrorEventArgs&&) & noexcept = default;
    };
    struct __declspec(empty_bases) SessionStatus : Microsoft::Azure::SpatialAnchors::ISessionStatus
    {
        SessionStatus(std::nullptr_t) noexcept {}
        SessionStatus(void* ptr, take_ownership_from_abi_t) noexcept : Microsoft::Azure::SpatialAnchors::ISessionStatus(ptr, take_ownership_from_abi) {}
        SessionStatus(SessionStatus const&) noexcept = default;
        SessionStatus(SessionStatus&&) noexcept = default;
        SessionStatus& operator=(SessionStatus const&) & noexcept = default;
        SessionStatus& operator=(SessionStatus&&) & noexcept = default;
    };
    struct __declspec(empty_bases) SessionUpdatedEventArgs : Microsoft::Azure::SpatialAnchors::ISessionUpdatedEventArgs
    {
        SessionUpdatedEventArgs(std::nullptr_t) noexcept {}
        SessionUpdatedEventArgs(void* ptr, take_ownership_from_abi_t) noexcept : Microsoft::Azure::SpatialAnchors::ISessionUpdatedEventArgs(ptr, take_ownership_from_abi) {}
        SessionUpdatedEventArgs(SessionUpdatedEventArgs const&) noexcept = default;
        SessionUpdatedEventArgs(SessionUpdatedEventArgs&&) noexcept = default;
        SessionUpdatedEventArgs& operator=(SessionUpdatedEventArgs const&) & noexcept = default;
        SessionUpdatedEventArgs& operator=(SessionUpdatedEventArgs&&) & noexcept = default;
    };
    struct __declspec(empty_bases) TokenRequiredEventArgs : Microsoft::Azure::SpatialAnchors::ITokenRequiredEventArgs
    {
        TokenRequiredEventArgs(std::nullptr_t) noexcept {}
        TokenRequiredEventArgs(void* ptr, take_ownership_from_abi_t) noexcept : Microsoft::Azure::SpatialAnchors::ITokenRequiredEventArgs(ptr, take_ownership_from_abi) {}
        TokenRequiredEventArgs(TokenRequiredEventArgs const&) noexcept = default;
        TokenRequiredEventArgs(TokenRequiredEventArgs&&) noexcept = default;
        TokenRequiredEventArgs& operator=(TokenRequiredEventArgs const&) & noexcept = default;
        TokenRequiredEventArgs& operator=(TokenRequiredEventArgs&&) & noexcept = default;
    };
}
#endif
