// WARNING: Please don't edit this file. It was generated by C++/WinRT v2.0.201217.4

#ifndef WINRT_Microsoft_Azure_SpatialAnchors_0_H
#define WINRT_Microsoft_Azure_SpatialAnchors_0_H
WINRT_EXPORT namespace winrt::Windows::Foundation
{
    struct EventRegistrationToken;
    struct IAsyncAction;
    template <typename TResult> struct __declspec(empty_bases) IAsyncOperation;
}
WINRT_EXPORT namespace winrt::Windows::Foundation::Collections
{
    template <typename K, typename V> struct __declspec(empty_bases) IMap;
    template <typename T> struct __declspec(empty_bases) IVectorView;
    template <typename T> struct __declspec(empty_bases) IVector;
}
WINRT_EXPORT namespace winrt::Windows::Perception::Spatial
{
    struct SpatialAnchor;
}
WINRT_EXPORT namespace winrt::Microsoft::Azure::SpatialAnchors
{
    enum class AnchorDataCategory : uint32_t
    {
        None = 0,
        Properties = 0x1,
        Spatial = 0x2,
    };
    enum class BluetoothStatusResult : int32_t
    {
        Available = 0,
        DisabledCapability = 1,
        MissingSensorFingerprintProvider = 2,
        NoBeaconsFound = 3,
    };
    enum class CloudSpatialErrorCode : int32_t
    {
        MetadataTooLarge = 0,
        ApplicationNotAuthenticated = 1,
        ApplicationNotAuthorized = 2,
        ConcurrencyViolation = 3,
        NotEnoughSpatialData = 4,
        NoSpatialLocationHint = 5,
        CannotConnectToServer = 6,
        ServerError = 7,
        AlreadyAssociatedWithADifferentStore = 8,
        AlreadyExists = 9,
        NoLocateCriteriaSpecified = 10,
        NoAccessTokenSpecified = 11,
        UnableToObtainAccessToken = 12,
        TooManyRequests = 13,
        LocateCriteriaMissingRequiredValues = 14,
        LocateCriteriaInConflict = 15,
        LocateCriteriaInvalid = 16,
        LocateCriteriaNotSupported = 17,
        Unknown = 19,
        HttpTimeout = 20,
    };
    enum class GeoLocationStatusResult : int32_t
    {
        Available = 0,
        DisabledCapability = 1,
        MissingSensorFingerprintProvider = 2,
        NoGPSData = 3,
    };
    enum class LocateAnchorStatus : int32_t
    {
        AlreadyTracked = 0,
        Located = 1,
        NotLocated = 2,
        NotLocatedAnchorDoesNotExist = 3,
    };
    enum class LocateStrategy : int32_t
    {
        AnyStrategy = 0,
        VisualInformation = 1,
        Relationship = 2,
    };
    enum class SessionLogLevel : int32_t
    {
        None = 0,
        Error = 1,
        Warning = 2,
        Information = 3,
        Debug = 4,
        All = 5,
    };
    enum class SessionUserFeedback : uint32_t
    {
        None = 0,
        NotEnoughMotion = 0x1,
        MotionTooQuick = 0x2,
        NotEnoughFeatures = 0x4,
    };
    enum class WifiStatusResult : int32_t
    {
        Available = 0,
        DisabledCapability = 1,
        MissingSensorFingerprintProvider = 2,
        NoAccessPointsFound = 3,
    };
    struct IAnchorLocateCriteria;
    struct IAnchorLocatedEventArgs;
    struct ICloudSpatialAnchor;
    struct ICloudSpatialAnchorMap;
    struct ICloudSpatialAnchorSession;
    struct ICloudSpatialAnchorSessionDeferral;
    struct ICloudSpatialAnchorSessionDiagnostics;
    struct ICloudSpatialAnchorWatcher;
    struct IGeoLocation;
    struct ILocateAnchorsCompletedEventArgs;
    struct INearAnchorCriteria;
    struct INearDeviceCriteria;
    struct IOnLogDebugEventArgs;
    struct IPlatformLocationProvider;
    struct ISensorCapabilities;
    struct ISensorFingerprintEventArgs;
    struct ISessionConfiguration;
    struct ISessionErrorEventArgs;
    struct ISessionStatus;
    struct ISessionUpdatedEventArgs;
    struct ITokenRequiredEventArgs;
    struct AnchorLocateCriteria;
    struct AnchorLocatedEventArgs;
    struct CloudSpatialAnchor;
    struct CloudSpatialAnchorMap;
    struct CloudSpatialAnchorSession;
    struct CloudSpatialAnchorSessionDeferral;
    struct CloudSpatialAnchorSessionDiagnostics;
    struct CloudSpatialAnchorWatcher;
    struct GeoLocation;
    struct LocateAnchorsCompletedEventArgs;
    struct NearAnchorCriteria;
    struct NearDeviceCriteria;
    struct OnLogDebugEventArgs;
    struct PlatformLocationProvider;
    struct SensorCapabilities;
    struct SensorFingerprintEventArgs;
    struct SessionConfiguration;
    struct SessionErrorEventArgs;
    struct SessionStatus;
    struct SessionUpdatedEventArgs;
    struct TokenRequiredEventArgs;
    struct AnchorLocatedDelegate;
    struct LocateAnchorsCompletedDelegate;
    struct OnLogDebugDelegate;
    struct SessionErrorDelegate;
    struct SessionUpdatedDelegate;
    struct TokenRequiredDelegate;
    struct UpdatedSensorFingerprintRequiredDelegate;
}
namespace winrt::impl
{
    template <> struct category<Microsoft::Azure::SpatialAnchors::IAnchorLocateCriteria>{ using type = interface_category; };
    template <> struct category<Microsoft::Azure::SpatialAnchors::IAnchorLocatedEventArgs>{ using type = interface_category; };
    template <> struct category<Microsoft::Azure::SpatialAnchors::ICloudSpatialAnchor>{ using type = interface_category; };
    template <> struct category<Microsoft::Azure::SpatialAnchors::ICloudSpatialAnchorMap>{ using type = interface_category; };
    template <> struct category<Microsoft::Azure::SpatialAnchors::ICloudSpatialAnchorSession>{ using type = interface_category; };
    template <> struct category<Microsoft::Azure::SpatialAnchors::ICloudSpatialAnchorSessionDeferral>{ using type = interface_category; };
    template <> struct category<Microsoft::Azure::SpatialAnchors::ICloudSpatialAnchorSessionDiagnostics>{ using type = interface_category; };
    template <> struct category<Microsoft::Azure::SpatialAnchors::ICloudSpatialAnchorWatcher>{ using type = interface_category; };
    template <> struct category<Microsoft::Azure::SpatialAnchors::IGeoLocation>{ using type = interface_category; };
    template <> struct category<Microsoft::Azure::SpatialAnchors::ILocateAnchorsCompletedEventArgs>{ using type = interface_category; };
    template <> struct category<Microsoft::Azure::SpatialAnchors::INearAnchorCriteria>{ using type = interface_category; };
    template <> struct category<Microsoft::Azure::SpatialAnchors::INearDeviceCriteria>{ using type = interface_category; };
    template <> struct category<Microsoft::Azure::SpatialAnchors::IOnLogDebugEventArgs>{ using type = interface_category; };
    template <> struct category<Microsoft::Azure::SpatialAnchors::IPlatformLocationProvider>{ using type = interface_category; };
    template <> struct category<Microsoft::Azure::SpatialAnchors::ISensorCapabilities>{ using type = interface_category; };
    template <> struct category<Microsoft::Azure::SpatialAnchors::ISensorFingerprintEventArgs>{ using type = interface_category; };
    template <> struct category<Microsoft::Azure::SpatialAnchors::ISessionConfiguration>{ using type = interface_category; };
    template <> struct category<Microsoft::Azure::SpatialAnchors::ISessionErrorEventArgs>{ using type = interface_category; };
    template <> struct category<Microsoft::Azure::SpatialAnchors::ISessionStatus>{ using type = interface_category; };
    template <> struct category<Microsoft::Azure::SpatialAnchors::ISessionUpdatedEventArgs>{ using type = interface_category; };
    template <> struct category<Microsoft::Azure::SpatialAnchors::ITokenRequiredEventArgs>{ using type = interface_category; };
    template <> struct category<Microsoft::Azure::SpatialAnchors::AnchorLocateCriteria>{ using type = class_category; };
    template <> struct category<Microsoft::Azure::SpatialAnchors::AnchorLocatedEventArgs>{ using type = class_category; };
    template <> struct category<Microsoft::Azure::SpatialAnchors::CloudSpatialAnchor>{ using type = class_category; };
    template <> struct category<Microsoft::Azure::SpatialAnchors::CloudSpatialAnchorMap>{ using type = class_category; };
    template <> struct category<Microsoft::Azure::SpatialAnchors::CloudSpatialAnchorSession>{ using type = class_category; };
    template <> struct category<Microsoft::Azure::SpatialAnchors::CloudSpatialAnchorSessionDeferral>{ using type = class_category; };
    template <> struct category<Microsoft::Azure::SpatialAnchors::CloudSpatialAnchorSessionDiagnostics>{ using type = class_category; };
    template <> struct category<Microsoft::Azure::SpatialAnchors::CloudSpatialAnchorWatcher>{ using type = class_category; };
    template <> struct category<Microsoft::Azure::SpatialAnchors::GeoLocation>{ using type = class_category; };
    template <> struct category<Microsoft::Azure::SpatialAnchors::LocateAnchorsCompletedEventArgs>{ using type = class_category; };
    template <> struct category<Microsoft::Azure::SpatialAnchors::NearAnchorCriteria>{ using type = class_category; };
    template <> struct category<Microsoft::Azure::SpatialAnchors::NearDeviceCriteria>{ using type = class_category; };
    template <> struct category<Microsoft::Azure::SpatialAnchors::OnLogDebugEventArgs>{ using type = class_category; };
    template <> struct category<Microsoft::Azure::SpatialAnchors::PlatformLocationProvider>{ using type = class_category; };
    template <> struct category<Microsoft::Azure::SpatialAnchors::SensorCapabilities>{ using type = class_category; };
    template <> struct category<Microsoft::Azure::SpatialAnchors::SensorFingerprintEventArgs>{ using type = class_category; };
    template <> struct category<Microsoft::Azure::SpatialAnchors::SessionConfiguration>{ using type = class_category; };
    template <> struct category<Microsoft::Azure::SpatialAnchors::SessionErrorEventArgs>{ using type = class_category; };
    template <> struct category<Microsoft::Azure::SpatialAnchors::SessionStatus>{ using type = class_category; };
    template <> struct category<Microsoft::Azure::SpatialAnchors::SessionUpdatedEventArgs>{ using type = class_category; };
    template <> struct category<Microsoft::Azure::SpatialAnchors::TokenRequiredEventArgs>{ using type = class_category; };
    template <> struct category<Microsoft::Azure::SpatialAnchors::AnchorDataCategory>{ using type = enum_category; };
    template <> struct category<Microsoft::Azure::SpatialAnchors::BluetoothStatusResult>{ using type = enum_category; };
    template <> struct category<Microsoft::Azure::SpatialAnchors::CloudSpatialErrorCode>{ using type = enum_category; };
    template <> struct category<Microsoft::Azure::SpatialAnchors::GeoLocationStatusResult>{ using type = enum_category; };
    template <> struct category<Microsoft::Azure::SpatialAnchors::LocateAnchorStatus>{ using type = enum_category; };
    template <> struct category<Microsoft::Azure::SpatialAnchors::LocateStrategy>{ using type = enum_category; };
    template <> struct category<Microsoft::Azure::SpatialAnchors::SessionLogLevel>{ using type = enum_category; };
    template <> struct category<Microsoft::Azure::SpatialAnchors::SessionUserFeedback>{ using type = enum_category; };
    template <> struct category<Microsoft::Azure::SpatialAnchors::WifiStatusResult>{ using type = enum_category; };
    template <> struct category<Microsoft::Azure::SpatialAnchors::AnchorLocatedDelegate>{ using type = delegate_category; };
    template <> struct category<Microsoft::Azure::SpatialAnchors::LocateAnchorsCompletedDelegate>{ using type = delegate_category; };
    template <> struct category<Microsoft::Azure::SpatialAnchors::OnLogDebugDelegate>{ using type = delegate_category; };
    template <> struct category<Microsoft::Azure::SpatialAnchors::SessionErrorDelegate>{ using type = delegate_category; };
    template <> struct category<Microsoft::Azure::SpatialAnchors::SessionUpdatedDelegate>{ using type = delegate_category; };
    template <> struct category<Microsoft::Azure::SpatialAnchors::TokenRequiredDelegate>{ using type = delegate_category; };
    template <> struct category<Microsoft::Azure::SpatialAnchors::UpdatedSensorFingerprintRequiredDelegate>{ using type = delegate_category; };
    template <> inline constexpr auto& name_v<Microsoft::Azure::SpatialAnchors::AnchorLocateCriteria> = L"Microsoft.Azure.SpatialAnchors.AnchorLocateCriteria";
    template <> inline constexpr auto& name_v<Microsoft::Azure::SpatialAnchors::AnchorLocatedEventArgs> = L"Microsoft.Azure.SpatialAnchors.AnchorLocatedEventArgs";
    template <> inline constexpr auto& name_v<Microsoft::Azure::SpatialAnchors::CloudSpatialAnchor> = L"Microsoft.Azure.SpatialAnchors.CloudSpatialAnchor";
    template <> inline constexpr auto& name_v<Microsoft::Azure::SpatialAnchors::CloudSpatialAnchorMap> = L"Microsoft.Azure.SpatialAnchors.CloudSpatialAnchorMap";
    template <> inline constexpr auto& name_v<Microsoft::Azure::SpatialAnchors::CloudSpatialAnchorSession> = L"Microsoft.Azure.SpatialAnchors.CloudSpatialAnchorSession";
    template <> inline constexpr auto& name_v<Microsoft::Azure::SpatialAnchors::CloudSpatialAnchorSessionDeferral> = L"Microsoft.Azure.SpatialAnchors.CloudSpatialAnchorSessionDeferral";
    template <> inline constexpr auto& name_v<Microsoft::Azure::SpatialAnchors::CloudSpatialAnchorSessionDiagnostics> = L"Microsoft.Azure.SpatialAnchors.CloudSpatialAnchorSessionDiagnostics";
    template <> inline constexpr auto& name_v<Microsoft::Azure::SpatialAnchors::CloudSpatialAnchorWatcher> = L"Microsoft.Azure.SpatialAnchors.CloudSpatialAnchorWatcher";
    template <> inline constexpr auto& name_v<Microsoft::Azure::SpatialAnchors::GeoLocation> = L"Microsoft.Azure.SpatialAnchors.GeoLocation";
    template <> inline constexpr auto& name_v<Microsoft::Azure::SpatialAnchors::LocateAnchorsCompletedEventArgs> = L"Microsoft.Azure.SpatialAnchors.LocateAnchorsCompletedEventArgs";
    template <> inline constexpr auto& name_v<Microsoft::Azure::SpatialAnchors::NearAnchorCriteria> = L"Microsoft.Azure.SpatialAnchors.NearAnchorCriteria";
    template <> inline constexpr auto& name_v<Microsoft::Azure::SpatialAnchors::NearDeviceCriteria> = L"Microsoft.Azure.SpatialAnchors.NearDeviceCriteria";
    template <> inline constexpr auto& name_v<Microsoft::Azure::SpatialAnchors::OnLogDebugEventArgs> = L"Microsoft.Azure.SpatialAnchors.OnLogDebugEventArgs";
    template <> inline constexpr auto& name_v<Microsoft::Azure::SpatialAnchors::PlatformLocationProvider> = L"Microsoft.Azure.SpatialAnchors.PlatformLocationProvider";
    template <> inline constexpr auto& name_v<Microsoft::Azure::SpatialAnchors::SensorCapabilities> = L"Microsoft.Azure.SpatialAnchors.SensorCapabilities";
    template <> inline constexpr auto& name_v<Microsoft::Azure::SpatialAnchors::SensorFingerprintEventArgs> = L"Microsoft.Azure.SpatialAnchors.SensorFingerprintEventArgs";
    template <> inline constexpr auto& name_v<Microsoft::Azure::SpatialAnchors::SessionConfiguration> = L"Microsoft.Azure.SpatialAnchors.SessionConfiguration";
    template <> inline constexpr auto& name_v<Microsoft::Azure::SpatialAnchors::SessionErrorEventArgs> = L"Microsoft.Azure.SpatialAnchors.SessionErrorEventArgs";
    template <> inline constexpr auto& name_v<Microsoft::Azure::SpatialAnchors::SessionStatus> = L"Microsoft.Azure.SpatialAnchors.SessionStatus";
    template <> inline constexpr auto& name_v<Microsoft::Azure::SpatialAnchors::SessionUpdatedEventArgs> = L"Microsoft.Azure.SpatialAnchors.SessionUpdatedEventArgs";
    template <> inline constexpr auto& name_v<Microsoft::Azure::SpatialAnchors::TokenRequiredEventArgs> = L"Microsoft.Azure.SpatialAnchors.TokenRequiredEventArgs";
    template <> inline constexpr auto& name_v<Microsoft::Azure::SpatialAnchors::AnchorDataCategory> = L"Microsoft.Azure.SpatialAnchors.AnchorDataCategory";
    template <> inline constexpr auto& name_v<Microsoft::Azure::SpatialAnchors::BluetoothStatusResult> = L"Microsoft.Azure.SpatialAnchors.BluetoothStatusResult";
    template <> inline constexpr auto& name_v<Microsoft::Azure::SpatialAnchors::CloudSpatialErrorCode> = L"Microsoft.Azure.SpatialAnchors.CloudSpatialErrorCode";
    template <> inline constexpr auto& name_v<Microsoft::Azure::SpatialAnchors::GeoLocationStatusResult> = L"Microsoft.Azure.SpatialAnchors.GeoLocationStatusResult";
    template <> inline constexpr auto& name_v<Microsoft::Azure::SpatialAnchors::LocateAnchorStatus> = L"Microsoft.Azure.SpatialAnchors.LocateAnchorStatus";
    template <> inline constexpr auto& name_v<Microsoft::Azure::SpatialAnchors::LocateStrategy> = L"Microsoft.Azure.SpatialAnchors.LocateStrategy";
    template <> inline constexpr auto& name_v<Microsoft::Azure::SpatialAnchors::SessionLogLevel> = L"Microsoft.Azure.SpatialAnchors.SessionLogLevel";
    template <> inline constexpr auto& name_v<Microsoft::Azure::SpatialAnchors::SessionUserFeedback> = L"Microsoft.Azure.SpatialAnchors.SessionUserFeedback";
    template <> inline constexpr auto& name_v<Microsoft::Azure::SpatialAnchors::WifiStatusResult> = L"Microsoft.Azure.SpatialAnchors.WifiStatusResult";
    template <> inline constexpr auto& name_v<Microsoft::Azure::SpatialAnchors::IAnchorLocateCriteria> = L"Microsoft.Azure.SpatialAnchors.IAnchorLocateCriteria";
    template <> inline constexpr auto& name_v<Microsoft::Azure::SpatialAnchors::IAnchorLocatedEventArgs> = L"Microsoft.Azure.SpatialAnchors.IAnchorLocatedEventArgs";
    template <> inline constexpr auto& name_v<Microsoft::Azure::SpatialAnchors::ICloudSpatialAnchor> = L"Microsoft.Azure.SpatialAnchors.ICloudSpatialAnchor";
    template <> inline constexpr auto& name_v<Microsoft::Azure::SpatialAnchors::ICloudSpatialAnchorMap> = L"Microsoft.Azure.SpatialAnchors.ICloudSpatialAnchorMap";
    template <> inline constexpr auto& name_v<Microsoft::Azure::SpatialAnchors::ICloudSpatialAnchorSession> = L"Microsoft.Azure.SpatialAnchors.ICloudSpatialAnchorSession";
    template <> inline constexpr auto& name_v<Microsoft::Azure::SpatialAnchors::ICloudSpatialAnchorSessionDeferral> = L"Microsoft.Azure.SpatialAnchors.ICloudSpatialAnchorSessionDeferral";
    template <> inline constexpr auto& name_v<Microsoft::Azure::SpatialAnchors::ICloudSpatialAnchorSessionDiagnostics> = L"Microsoft.Azure.SpatialAnchors.ICloudSpatialAnchorSessionDiagnostics";
    template <> inline constexpr auto& name_v<Microsoft::Azure::SpatialAnchors::ICloudSpatialAnchorWatcher> = L"Microsoft.Azure.SpatialAnchors.ICloudSpatialAnchorWatcher";
    template <> inline constexpr auto& name_v<Microsoft::Azure::SpatialAnchors::IGeoLocation> = L"Microsoft.Azure.SpatialAnchors.IGeoLocation";
    template <> inline constexpr auto& name_v<Microsoft::Azure::SpatialAnchors::ILocateAnchorsCompletedEventArgs> = L"Microsoft.Azure.SpatialAnchors.ILocateAnchorsCompletedEventArgs";
    template <> inline constexpr auto& name_v<Microsoft::Azure::SpatialAnchors::INearAnchorCriteria> = L"Microsoft.Azure.SpatialAnchors.INearAnchorCriteria";
    template <> inline constexpr auto& name_v<Microsoft::Azure::SpatialAnchors::INearDeviceCriteria> = L"Microsoft.Azure.SpatialAnchors.INearDeviceCriteria";
    template <> inline constexpr auto& name_v<Microsoft::Azure::SpatialAnchors::IOnLogDebugEventArgs> = L"Microsoft.Azure.SpatialAnchors.IOnLogDebugEventArgs";
    template <> inline constexpr auto& name_v<Microsoft::Azure::SpatialAnchors::IPlatformLocationProvider> = L"Microsoft.Azure.SpatialAnchors.IPlatformLocationProvider";
    template <> inline constexpr auto& name_v<Microsoft::Azure::SpatialAnchors::ISensorCapabilities> = L"Microsoft.Azure.SpatialAnchors.ISensorCapabilities";
    template <> inline constexpr auto& name_v<Microsoft::Azure::SpatialAnchors::ISensorFingerprintEventArgs> = L"Microsoft.Azure.SpatialAnchors.ISensorFingerprintEventArgs";
    template <> inline constexpr auto& name_v<Microsoft::Azure::SpatialAnchors::ISessionConfiguration> = L"Microsoft.Azure.SpatialAnchors.ISessionConfiguration";
    template <> inline constexpr auto& name_v<Microsoft::Azure::SpatialAnchors::ISessionErrorEventArgs> = L"Microsoft.Azure.SpatialAnchors.ISessionErrorEventArgs";
    template <> inline constexpr auto& name_v<Microsoft::Azure::SpatialAnchors::ISessionStatus> = L"Microsoft.Azure.SpatialAnchors.ISessionStatus";
    template <> inline constexpr auto& name_v<Microsoft::Azure::SpatialAnchors::ISessionUpdatedEventArgs> = L"Microsoft.Azure.SpatialAnchors.ISessionUpdatedEventArgs";
    template <> inline constexpr auto& name_v<Microsoft::Azure::SpatialAnchors::ITokenRequiredEventArgs> = L"Microsoft.Azure.SpatialAnchors.ITokenRequiredEventArgs";
    template <> inline constexpr auto& name_v<Microsoft::Azure::SpatialAnchors::AnchorLocatedDelegate> = L"Microsoft.Azure.SpatialAnchors.AnchorLocatedDelegate";
    template <> inline constexpr auto& name_v<Microsoft::Azure::SpatialAnchors::LocateAnchorsCompletedDelegate> = L"Microsoft.Azure.SpatialAnchors.LocateAnchorsCompletedDelegate";
    template <> inline constexpr auto& name_v<Microsoft::Azure::SpatialAnchors::OnLogDebugDelegate> = L"Microsoft.Azure.SpatialAnchors.OnLogDebugDelegate";
    template <> inline constexpr auto& name_v<Microsoft::Azure::SpatialAnchors::SessionErrorDelegate> = L"Microsoft.Azure.SpatialAnchors.SessionErrorDelegate";
    template <> inline constexpr auto& name_v<Microsoft::Azure::SpatialAnchors::SessionUpdatedDelegate> = L"Microsoft.Azure.SpatialAnchors.SessionUpdatedDelegate";
    template <> inline constexpr auto& name_v<Microsoft::Azure::SpatialAnchors::TokenRequiredDelegate> = L"Microsoft.Azure.SpatialAnchors.TokenRequiredDelegate";
    template <> inline constexpr auto& name_v<Microsoft::Azure::SpatialAnchors::UpdatedSensorFingerprintRequiredDelegate> = L"Microsoft.Azure.SpatialAnchors.UpdatedSensorFingerprintRequiredDelegate";
    template <> inline constexpr guid guid_v<Microsoft::Azure::SpatialAnchors::IAnchorLocateCriteria>{ 0xE8AE4D07,0x03B1,0x5AFC,{ 0xB9,0x90,0xA1,0xF5,0xB5,0xCB,0x38,0x36 } }; // E8AE4D07-03B1-5AFC-B990-A1F5B5CB3836
    template <> inline constexpr guid guid_v<Microsoft::Azure::SpatialAnchors::IAnchorLocatedEventArgs>{ 0x7F38E7AF,0xD771,0x5EEA,{ 0x9D,0xB7,0x41,0x94,0x7A,0x23,0x98,0x42 } }; // 7F38E7AF-D771-5EEA-9DB7-41947A239842
    template <> inline constexpr guid guid_v<Microsoft::Azure::SpatialAnchors::ICloudSpatialAnchor>{ 0x73A3FD59,0xF1E3,0x55FB,{ 0x87,0xC4,0xB9,0x56,0x04,0xFD,0xCE,0xA7 } }; // 73A3FD59-F1E3-55FB-87C4-B95604FDCEA7
    template <> inline constexpr guid guid_v<Microsoft::Azure::SpatialAnchors::ICloudSpatialAnchorMap>{ 0x5FD7271F,0x3619,0x5604,{ 0x8F,0x4C,0xD0,0xEE,0x14,0x6D,0x0C,0xF0 } }; // 5FD7271F-3619-5604-8F4C-D0EE146D0CF0
    template <> inline constexpr guid guid_v<Microsoft::Azure::SpatialAnchors::ICloudSpatialAnchorSession>{ 0x78AFAC5B,0xD938,0x5D89,{ 0xB2,0xC3,0x10,0x1E,0x51,0x33,0xD6,0x8A } }; // 78AFAC5B-D938-5D89-B2C3-101E5133D68A
    template <> inline constexpr guid guid_v<Microsoft::Azure::SpatialAnchors::ICloudSpatialAnchorSessionDeferral>{ 0x165EF7E4,0xC1A1,0x52F0,{ 0x85,0x01,0x72,0x27,0x5C,0x9E,0x32,0x05 } }; // 165EF7E4-C1A1-52F0-8501-72275C9E3205
    template <> inline constexpr guid guid_v<Microsoft::Azure::SpatialAnchors::ICloudSpatialAnchorSessionDiagnostics>{ 0x6AE03033,0xDA1B,0x50EF,{ 0x9D,0xCE,0x00,0x6F,0x06,0xCE,0x41,0xE8 } }; // 6AE03033-DA1B-50EF-9DCE-006F06CE41E8
    template <> inline constexpr guid guid_v<Microsoft::Azure::SpatialAnchors::ICloudSpatialAnchorWatcher>{ 0x57BA688B,0xC6A8,0x5045,{ 0x9E,0x60,0x73,0x8D,0x3B,0xF7,0x3F,0x68 } }; // 57BA688B-C6A8-5045-9E60-738D3BF73F68
    template <> inline constexpr guid guid_v<Microsoft::Azure::SpatialAnchors::IGeoLocation>{ 0xEDEE4C79,0xE186,0x5F22,{ 0x81,0xCE,0x77,0x2B,0xBF,0x1A,0x7B,0x5E } }; // EDEE4C79-E186-5F22-81CE-772BBF1A7B5E
    template <> inline constexpr guid guid_v<Microsoft::Azure::SpatialAnchors::ILocateAnchorsCompletedEventArgs>{ 0xA9301B24,0xFBBB,0x5FF9,{ 0x9E,0xFA,0x36,0x73,0xA4,0xE0,0xC8,0xD6 } }; // A9301B24-FBBB-5FF9-9EFA-3673A4E0C8D6
    template <> inline constexpr guid guid_v<Microsoft::Azure::SpatialAnchors::INearAnchorCriteria>{ 0x4F4FE473,0x8C98,0x5B3E,{ 0xA5,0x1B,0xF1,0x00,0x16,0x95,0xD0,0x2F } }; // 4F4FE473-8C98-5B3E-A51B-F1001695D02F
    template <> inline constexpr guid guid_v<Microsoft::Azure::SpatialAnchors::INearDeviceCriteria>{ 0xC4CAE28B,0x4DF6,0x5F56,{ 0xAA,0xAE,0x11,0xF0,0x3F,0xBC,0x6C,0x16 } }; // C4CAE28B-4DF6-5F56-AAAE-11F03FBC6C16
    template <> inline constexpr guid guid_v<Microsoft::Azure::SpatialAnchors::IOnLogDebugEventArgs>{ 0xACF6C60A,0xD872,0x58DC,{ 0xA5,0xEC,0xBF,0x1F,0xA1,0x73,0x92,0x33 } }; // ACF6C60A-D872-58DC-A5EC-BF1FA1739233
    template <> inline constexpr guid guid_v<Microsoft::Azure::SpatialAnchors::IPlatformLocationProvider>{ 0xACB8C3B0,0xFB5F,0x5778,{ 0xAD,0x0D,0x66,0x81,0xB0,0xD6,0xF8,0x50 } }; // ACB8C3B0-FB5F-5778-AD0D-6681B0D6F850
    template <> inline constexpr guid guid_v<Microsoft::Azure::SpatialAnchors::ISensorCapabilities>{ 0x3D9D9D7A,0x0B22,0x5AB2,{ 0xB2,0x0B,0xDE,0x50,0x80,0x2E,0xEE,0xA9 } }; // 3D9D9D7A-0B22-5AB2-B20B-DE50802EEEA9
    template <> inline constexpr guid guid_v<Microsoft::Azure::SpatialAnchors::ISensorFingerprintEventArgs>{ 0x6AC48E66,0xE628,0x563A,{ 0xA2,0x35,0x13,0xFC,0x4F,0xB1,0x54,0xE7 } }; // 6AC48E66-E628-563A-A235-13FC4FB154E7
    template <> inline constexpr guid guid_v<Microsoft::Azure::SpatialAnchors::ISessionConfiguration>{ 0xB2164E62,0xC951,0x54CE,{ 0xAB,0x93,0xCC,0xEC,0xDC,0x37,0x6D,0x1D } }; // B2164E62-C951-54CE-AB93-CCECDC376D1D
    template <> inline constexpr guid guid_v<Microsoft::Azure::SpatialAnchors::ISessionErrorEventArgs>{ 0x5AF79874,0x30C4,0x556A,{ 0xB1,0xA1,0x35,0xB3,0xC1,0xA6,0x99,0x8C } }; // 5AF79874-30C4-556A-B1A1-35B3C1A6998C
    template <> inline constexpr guid guid_v<Microsoft::Azure::SpatialAnchors::ISessionStatus>{ 0xF103B184,0xED9D,0x5DA5,{ 0x92,0x69,0xE3,0x1D,0x65,0xEC,0xB7,0x06 } }; // F103B184-ED9D-5DA5-9269-E31D65ECB706
    template <> inline constexpr guid guid_v<Microsoft::Azure::SpatialAnchors::ISessionUpdatedEventArgs>{ 0x735C5193,0xB627,0x5A24,{ 0xBE,0x9C,0xDC,0x19,0x98,0xA3,0x98,0xC2 } }; // 735C5193-B627-5A24-BE9C-DC1998A398C2
    template <> inline constexpr guid guid_v<Microsoft::Azure::SpatialAnchors::ITokenRequiredEventArgs>{ 0x8D8BD6A9,0x38D6,0x564E,{ 0x98,0x13,0x91,0x1B,0x14,0x6A,0xBE,0x5C } }; // 8D8BD6A9-38D6-564E-9813-911B146ABE5C
    template <> inline constexpr guid guid_v<Microsoft::Azure::SpatialAnchors::AnchorLocatedDelegate>{ 0x27B10D8A,0xF58D,0x51C8,{ 0x8D,0x42,0x8A,0x4E,0x29,0x51,0x78,0xCC } }; // 27B10D8A-F58D-51C8-8D42-8A4E295178CC
    template <> inline constexpr guid guid_v<Microsoft::Azure::SpatialAnchors::LocateAnchorsCompletedDelegate>{ 0x773D1C23,0x0334,0x5DDF,{ 0x97,0x2F,0x80,0x1E,0x8C,0xF1,0x8F,0x54 } }; // 773D1C23-0334-5DDF-972F-801E8CF18F54
    template <> inline constexpr guid guid_v<Microsoft::Azure::SpatialAnchors::OnLogDebugDelegate>{ 0x9518A28D,0xC48D,0x51A4,{ 0xAE,0x0F,0xC1,0xD4,0x54,0xFB,0x0D,0x19 } }; // 9518A28D-C48D-51A4-AE0F-C1D454FB0D19
    template <> inline constexpr guid guid_v<Microsoft::Azure::SpatialAnchors::SessionErrorDelegate>{ 0xFEA2D1E3,0xAD2E,0x5D82,{ 0xAB,0x41,0x5F,0xE4,0xCE,0x30,0xE9,0x04 } }; // FEA2D1E3-AD2E-5D82-AB41-5FE4CE30E904
    template <> inline constexpr guid guid_v<Microsoft::Azure::SpatialAnchors::SessionUpdatedDelegate>{ 0x7DD43183,0x8A15,0x5D25,{ 0xB1,0x4B,0xA8,0x40,0x52,0xF5,0x00,0xC1 } }; // 7DD43183-8A15-5D25-B14B-A84052F500C1
    template <> inline constexpr guid guid_v<Microsoft::Azure::SpatialAnchors::TokenRequiredDelegate>{ 0xAB764891,0x9071,0x5ADA,{ 0xA8,0x59,0xB0,0x2E,0xFF,0x5A,0x29,0x69 } }; // AB764891-9071-5ADA-A859-B02EFF5A2969
    template <> inline constexpr guid guid_v<Microsoft::Azure::SpatialAnchors::UpdatedSensorFingerprintRequiredDelegate>{ 0xF83BD8A4,0x390A,0x56FD,{ 0xB7,0x08,0xF4,0x43,0x03,0xE3,0x81,0x93 } }; // F83BD8A4-390A-56FD-B708-F44303E38193
    template <> struct default_interface<Microsoft::Azure::SpatialAnchors::AnchorLocateCriteria>{ using type = Microsoft::Azure::SpatialAnchors::IAnchorLocateCriteria; };
    template <> struct default_interface<Microsoft::Azure::SpatialAnchors::AnchorLocatedEventArgs>{ using type = Microsoft::Azure::SpatialAnchors::IAnchorLocatedEventArgs; };
    template <> struct default_interface<Microsoft::Azure::SpatialAnchors::CloudSpatialAnchor>{ using type = Microsoft::Azure::SpatialAnchors::ICloudSpatialAnchor; };
    template <> struct default_interface<Microsoft::Azure::SpatialAnchors::CloudSpatialAnchorMap>{ using type = Microsoft::Azure::SpatialAnchors::ICloudSpatialAnchorMap; };
    template <> struct default_interface<Microsoft::Azure::SpatialAnchors::CloudSpatialAnchorSession>{ using type = Microsoft::Azure::SpatialAnchors::ICloudSpatialAnchorSession; };
    template <> struct default_interface<Microsoft::Azure::SpatialAnchors::CloudSpatialAnchorSessionDeferral>{ using type = Microsoft::Azure::SpatialAnchors::ICloudSpatialAnchorSessionDeferral; };
    template <> struct default_interface<Microsoft::Azure::SpatialAnchors::CloudSpatialAnchorSessionDiagnostics>{ using type = Microsoft::Azure::SpatialAnchors::ICloudSpatialAnchorSessionDiagnostics; };
    template <> struct default_interface<Microsoft::Azure::SpatialAnchors::CloudSpatialAnchorWatcher>{ using type = Microsoft::Azure::SpatialAnchors::ICloudSpatialAnchorWatcher; };
    template <> struct default_interface<Microsoft::Azure::SpatialAnchors::GeoLocation>{ using type = Microsoft::Azure::SpatialAnchors::IGeoLocation; };
    template <> struct default_interface<Microsoft::Azure::SpatialAnchors::LocateAnchorsCompletedEventArgs>{ using type = Microsoft::Azure::SpatialAnchors::ILocateAnchorsCompletedEventArgs; };
    template <> struct default_interface<Microsoft::Azure::SpatialAnchors::NearAnchorCriteria>{ using type = Microsoft::Azure::SpatialAnchors::INearAnchorCriteria; };
    template <> struct default_interface<Microsoft::Azure::SpatialAnchors::NearDeviceCriteria>{ using type = Microsoft::Azure::SpatialAnchors::INearDeviceCriteria; };
    template <> struct default_interface<Microsoft::Azure::SpatialAnchors::OnLogDebugEventArgs>{ using type = Microsoft::Azure::SpatialAnchors::IOnLogDebugEventArgs; };
    template <> struct default_interface<Microsoft::Azure::SpatialAnchors::PlatformLocationProvider>{ using type = Microsoft::Azure::SpatialAnchors::IPlatformLocationProvider; };
    template <> struct default_interface<Microsoft::Azure::SpatialAnchors::SensorCapabilities>{ using type = Microsoft::Azure::SpatialAnchors::ISensorCapabilities; };
    template <> struct default_interface<Microsoft::Azure::SpatialAnchors::SensorFingerprintEventArgs>{ using type = Microsoft::Azure::SpatialAnchors::ISensorFingerprintEventArgs; };
    template <> struct default_interface<Microsoft::Azure::SpatialAnchors::SessionConfiguration>{ using type = Microsoft::Azure::SpatialAnchors::ISessionConfiguration; };
    template <> struct default_interface<Microsoft::Azure::SpatialAnchors::SessionErrorEventArgs>{ using type = Microsoft::Azure::SpatialAnchors::ISessionErrorEventArgs; };
    template <> struct default_interface<Microsoft::Azure::SpatialAnchors::SessionStatus>{ using type = Microsoft::Azure::SpatialAnchors::ISessionStatus; };
    template <> struct default_interface<Microsoft::Azure::SpatialAnchors::SessionUpdatedEventArgs>{ using type = Microsoft::Azure::SpatialAnchors::ISessionUpdatedEventArgs; };
    template <> struct default_interface<Microsoft::Azure::SpatialAnchors::TokenRequiredEventArgs>{ using type = Microsoft::Azure::SpatialAnchors::ITokenRequiredEventArgs; };
    template <> struct abi<Microsoft::Azure::SpatialAnchors::IAnchorLocateCriteria>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_BypassCache(bool*) noexcept = 0;
            virtual int32_t __stdcall put_BypassCache(bool) noexcept = 0;
            virtual int32_t __stdcall get_RequestedCategories(uint32_t*) noexcept = 0;
            virtual int32_t __stdcall put_RequestedCategories(uint32_t) noexcept = 0;
            virtual int32_t __stdcall get_Strategy(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_Strategy(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_Identifiers(uint32_t* __valueSize, void***) noexcept = 0;
            virtual int32_t __stdcall put_Identifiers(uint32_t, void**) noexcept = 0;
            virtual int32_t __stdcall get_NearAnchor(void**) noexcept = 0;
            virtual int32_t __stdcall put_NearAnchor(void*) noexcept = 0;
            virtual int32_t __stdcall get_NearDevice(void**) noexcept = 0;
            virtual int32_t __stdcall put_NearDevice(void*) noexcept = 0;
        };
    };
    template <> struct abi<Microsoft::Azure::SpatialAnchors::IAnchorLocatedEventArgs>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_Anchor(void**) noexcept = 0;
            virtual int32_t __stdcall get_Identifier(void**) noexcept = 0;
            virtual int32_t __stdcall get_Status(int32_t*) noexcept = 0;
            virtual int32_t __stdcall get_Strategy(int32_t*) noexcept = 0;
            virtual int32_t __stdcall get_Watcher(void**) noexcept = 0;
        };
    };
    template <> struct abi<Microsoft::Azure::SpatialAnchors::ICloudSpatialAnchor>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_LocalAnchor(void**) noexcept = 0;
            virtual int32_t __stdcall put_LocalAnchor(void*) noexcept = 0;
            virtual int32_t __stdcall get_Expiration(int64_t*) noexcept = 0;
            virtual int32_t __stdcall put_Expiration(int64_t) noexcept = 0;
            virtual int32_t __stdcall get_Identifier(void**) noexcept = 0;
            virtual int32_t __stdcall get_AppProperties(void**) noexcept = 0;
            virtual int32_t __stdcall get_VersionTag(void**) noexcept = 0;
        };
    };
    template <> struct abi<Microsoft::Azure::SpatialAnchors::ICloudSpatialAnchorMap>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_Identifier(void**) noexcept = 0;
            virtual int32_t __stdcall get_Name(void**) noexcept = 0;
        };
    };
    template <> struct abi<Microsoft::Azure::SpatialAnchors::ICloudSpatialAnchorSession>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_Configuration(void**) noexcept = 0;
            virtual int32_t __stdcall get_Diagnostics(void**) noexcept = 0;
            virtual int32_t __stdcall get_LogLevel(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_LogLevel(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_LocationProvider(void**) noexcept = 0;
            virtual int32_t __stdcall put_LocationProvider(void*) noexcept = 0;
            virtual int32_t __stdcall get_SessionId(void**) noexcept = 0;
            virtual int32_t __stdcall add_TokenRequired(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_TokenRequired(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_AnchorLocated(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_AnchorLocated(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_LocateAnchorsCompleted(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_LocateAnchorsCompleted(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_SessionUpdated(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_SessionUpdated(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_Error(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_Error(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_OnLogDebug(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_OnLogDebug(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_UpdatedSensorFingerprintRequired(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_UpdatedSensorFingerprintRequired(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall GetAccessTokenWithAuthenticationTokenAsync(void*, void**) noexcept = 0;
            virtual int32_t __stdcall GetAccessTokenWithAccountKeyAsync(void*, void**) noexcept = 0;
            virtual int32_t __stdcall CreateAnchorAsync(void*, void**) noexcept = 0;
            virtual int32_t __stdcall CreateWatcher(void*, void**) noexcept = 0;
            virtual int32_t __stdcall GetAnchorPropertiesAsync(void*, void**) noexcept = 0;
            virtual int32_t __stdcall GetNearbyAnchorIdsAsync(void*, void**) noexcept = 0;
            virtual int32_t __stdcall GetActiveWatchers(void**) noexcept = 0;
            virtual int32_t __stdcall RefreshAnchorPropertiesAsync(void*, void**) noexcept = 0;
            virtual int32_t __stdcall UpdateAnchorPropertiesAsync(void*, void**) noexcept = 0;
            virtual int32_t __stdcall DeleteAnchorAsync(void*, void**) noexcept = 0;
            virtual int32_t __stdcall GetSessionStatusAsync(void**) noexcept = 0;
            virtual int32_t __stdcall Start() noexcept = 0;
            virtual int32_t __stdcall Stop() noexcept = 0;
            virtual int32_t __stdcall Reset() noexcept = 0;
            virtual int32_t __stdcall Dispose() noexcept = 0;
        };
    };
    template <> struct abi<Microsoft::Azure::SpatialAnchors::ICloudSpatialAnchorSessionDeferral>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall Complete() noexcept = 0;
        };
    };
    template <> struct abi<Microsoft::Azure::SpatialAnchors::ICloudSpatialAnchorSessionDiagnostics>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_LogLevel(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_LogLevel(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_LogDirectory(void**) noexcept = 0;
            virtual int32_t __stdcall put_LogDirectory(void*) noexcept = 0;
            virtual int32_t __stdcall get_MaxDiskSizeInMB(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_MaxDiskSizeInMB(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_ImagesEnabled(bool*) noexcept = 0;
            virtual int32_t __stdcall put_ImagesEnabled(bool) noexcept = 0;
            virtual int32_t __stdcall CreateManifestAsync(void*, void**) noexcept = 0;
            virtual int32_t __stdcall SubmitManifestAsync(void*, void**) noexcept = 0;
        };
    };
    template <> struct abi<Microsoft::Azure::SpatialAnchors::ICloudSpatialAnchorWatcher>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_Identifier(int32_t*) noexcept = 0;
            virtual int32_t __stdcall Stop() noexcept = 0;
        };
    };
    template <> struct abi<Microsoft::Azure::SpatialAnchors::IGeoLocation>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_Latitude(double*) noexcept = 0;
            virtual int32_t __stdcall put_Latitude(double) noexcept = 0;
            virtual int32_t __stdcall get_Longitude(double*) noexcept = 0;
            virtual int32_t __stdcall put_Longitude(double) noexcept = 0;
            virtual int32_t __stdcall get_HorizontalError(float*) noexcept = 0;
            virtual int32_t __stdcall put_HorizontalError(float) noexcept = 0;
            virtual int32_t __stdcall get_Altitude(float*) noexcept = 0;
            virtual int32_t __stdcall put_Altitude(float) noexcept = 0;
            virtual int32_t __stdcall get_VerticalError(float*) noexcept = 0;
            virtual int32_t __stdcall put_VerticalError(float) noexcept = 0;
        };
    };
    template <> struct abi<Microsoft::Azure::SpatialAnchors::ILocateAnchorsCompletedEventArgs>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_Cancelled(bool*) noexcept = 0;
            virtual int32_t __stdcall get_Watcher(void**) noexcept = 0;
        };
    };
    template <> struct abi<Microsoft::Azure::SpatialAnchors::INearAnchorCriteria>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_SourceAnchor(void**) noexcept = 0;
            virtual int32_t __stdcall put_SourceAnchor(void*) noexcept = 0;
            virtual int32_t __stdcall get_DistanceInMeters(float*) noexcept = 0;
            virtual int32_t __stdcall put_DistanceInMeters(float) noexcept = 0;
            virtual int32_t __stdcall get_MaxResultCount(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_MaxResultCount(int32_t) noexcept = 0;
        };
    };
    template <> struct abi<Microsoft::Azure::SpatialAnchors::INearDeviceCriteria>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_DistanceInMeters(float*) noexcept = 0;
            virtual int32_t __stdcall put_DistanceInMeters(float) noexcept = 0;
            virtual int32_t __stdcall get_MaxResultCount(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_MaxResultCount(int32_t) noexcept = 0;
        };
    };
    template <> struct abi<Microsoft::Azure::SpatialAnchors::IOnLogDebugEventArgs>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_Message(void**) noexcept = 0;
        };
    };
    template <> struct abi<Microsoft::Azure::SpatialAnchors::IPlatformLocationProvider>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_Sensors(void**) noexcept = 0;
            virtual int32_t __stdcall get_GeoLocationStatus(int32_t*) noexcept = 0;
            virtual int32_t __stdcall get_WifiStatus(int32_t*) noexcept = 0;
            virtual int32_t __stdcall get_BluetoothStatus(int32_t*) noexcept = 0;
            virtual int32_t __stdcall GetLocationEstimate(void**) noexcept = 0;
            virtual int32_t __stdcall Start() noexcept = 0;
            virtual int32_t __stdcall Stop() noexcept = 0;
        };
    };
    template <> struct abi<Microsoft::Azure::SpatialAnchors::ISensorCapabilities>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_GeoLocationEnabled(bool*) noexcept = 0;
            virtual int32_t __stdcall put_GeoLocationEnabled(bool) noexcept = 0;
            virtual int32_t __stdcall get_WifiEnabled(bool*) noexcept = 0;
            virtual int32_t __stdcall put_WifiEnabled(bool) noexcept = 0;
            virtual int32_t __stdcall get_BluetoothEnabled(bool*) noexcept = 0;
            virtual int32_t __stdcall put_BluetoothEnabled(bool) noexcept = 0;
            virtual int32_t __stdcall get_KnownBeaconProximityUuids(uint32_t* __valueSize, void***) noexcept = 0;
            virtual int32_t __stdcall put_KnownBeaconProximityUuids(uint32_t, void**) noexcept = 0;
        };
    };
    template <> struct abi<Microsoft::Azure::SpatialAnchors::ISensorFingerprintEventArgs>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_GeoPosition(void**) noexcept = 0;
            virtual int32_t __stdcall put_GeoPosition(void*) noexcept = 0;
        };
    };
    template <> struct abi<Microsoft::Azure::SpatialAnchors::ISessionConfiguration>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_AccountDomain(void**) noexcept = 0;
            virtual int32_t __stdcall put_AccountDomain(void*) noexcept = 0;
            virtual int32_t __stdcall get_AccountId(void**) noexcept = 0;
            virtual int32_t __stdcall put_AccountId(void*) noexcept = 0;
            virtual int32_t __stdcall get_AuthenticationToken(void**) noexcept = 0;
            virtual int32_t __stdcall put_AuthenticationToken(void*) noexcept = 0;
            virtual int32_t __stdcall get_AccountKey(void**) noexcept = 0;
            virtual int32_t __stdcall put_AccountKey(void*) noexcept = 0;
            virtual int32_t __stdcall get_AccessToken(void**) noexcept = 0;
            virtual int32_t __stdcall put_AccessToken(void*) noexcept = 0;
        };
    };
    template <> struct abi<Microsoft::Azure::SpatialAnchors::ISessionErrorEventArgs>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_ErrorCode(int32_t*) noexcept = 0;
            virtual int32_t __stdcall get_ErrorMessage(void**) noexcept = 0;
            virtual int32_t __stdcall get_Watcher(void**) noexcept = 0;
        };
    };
    template <> struct abi<Microsoft::Azure::SpatialAnchors::ISessionStatus>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_ReadyForCreateProgress(float*) noexcept = 0;
            virtual int32_t __stdcall get_RecommendedForCreateProgress(float*) noexcept = 0;
            virtual int32_t __stdcall get_SessionCreateHash(int32_t*) noexcept = 0;
            virtual int32_t __stdcall get_SessionLocateHash(int32_t*) noexcept = 0;
            virtual int32_t __stdcall get_UserFeedback(uint32_t*) noexcept = 0;
        };
    };
    template <> struct abi<Microsoft::Azure::SpatialAnchors::ISessionUpdatedEventArgs>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_Status(void**) noexcept = 0;
        };
    };
    template <> struct abi<Microsoft::Azure::SpatialAnchors::ITokenRequiredEventArgs>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_AccessToken(void**) noexcept = 0;
            virtual int32_t __stdcall put_AccessToken(void*) noexcept = 0;
            virtual int32_t __stdcall get_AuthenticationToken(void**) noexcept = 0;
            virtual int32_t __stdcall put_AuthenticationToken(void*) noexcept = 0;
            virtual int32_t __stdcall GetDeferral(void**) noexcept = 0;
        };
    };
    template <> struct abi<Microsoft::Azure::SpatialAnchors::AnchorLocatedDelegate>
    {
        struct __declspec(novtable) type : unknown_abi
        {
            virtual int32_t __stdcall Invoke(void*, void*) noexcept = 0;
        };
    };
    template <> struct abi<Microsoft::Azure::SpatialAnchors::LocateAnchorsCompletedDelegate>
    {
        struct __declspec(novtable) type : unknown_abi
        {
            virtual int32_t __stdcall Invoke(void*, void*) noexcept = 0;
        };
    };
    template <> struct abi<Microsoft::Azure::SpatialAnchors::OnLogDebugDelegate>
    {
        struct __declspec(novtable) type : unknown_abi
        {
            virtual int32_t __stdcall Invoke(void*, void*) noexcept = 0;
        };
    };
    template <> struct abi<Microsoft::Azure::SpatialAnchors::SessionErrorDelegate>
    {
        struct __declspec(novtable) type : unknown_abi
        {
            virtual int32_t __stdcall Invoke(void*, void*) noexcept = 0;
        };
    };
    template <> struct abi<Microsoft::Azure::SpatialAnchors::SessionUpdatedDelegate>
    {
        struct __declspec(novtable) type : unknown_abi
        {
            virtual int32_t __stdcall Invoke(void*, void*) noexcept = 0;
        };
    };
    template <> struct abi<Microsoft::Azure::SpatialAnchors::TokenRequiredDelegate>
    {
        struct __declspec(novtable) type : unknown_abi
        {
            virtual int32_t __stdcall Invoke(void*, void*) noexcept = 0;
        };
    };
    template <> struct abi<Microsoft::Azure::SpatialAnchors::UpdatedSensorFingerprintRequiredDelegate>
    {
        struct __declspec(novtable) type : unknown_abi
        {
            virtual int32_t __stdcall Invoke(void*, void*) noexcept = 0;
        };
    };
    template <typename D>
    struct consume_Microsoft_Azure_SpatialAnchors_IAnchorLocateCriteria
    {
        [[nodiscard]] WINRT_IMPL_AUTO(bool) BypassCache() const;
        WINRT_IMPL_AUTO(void) BypassCache(bool value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(Microsoft::Azure::SpatialAnchors::AnchorDataCategory) RequestedCategories() const;
        WINRT_IMPL_AUTO(void) RequestedCategories(Microsoft::Azure::SpatialAnchors::AnchorDataCategory const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(Microsoft::Azure::SpatialAnchors::LocateStrategy) Strategy() const;
        WINRT_IMPL_AUTO(void) Strategy(Microsoft::Azure::SpatialAnchors::LocateStrategy const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(com_array<hstring>) Identifiers() const;
        WINRT_IMPL_AUTO(void) Identifiers(array_view<hstring const> value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(Microsoft::Azure::SpatialAnchors::NearAnchorCriteria) NearAnchor() const;
        WINRT_IMPL_AUTO(void) NearAnchor(Microsoft::Azure::SpatialAnchors::NearAnchorCriteria const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(Microsoft::Azure::SpatialAnchors::NearDeviceCriteria) NearDevice() const;
        WINRT_IMPL_AUTO(void) NearDevice(Microsoft::Azure::SpatialAnchors::NearDeviceCriteria const& value) const;
    };
    template <> struct consume<Microsoft::Azure::SpatialAnchors::IAnchorLocateCriteria>
    {
        template <typename D> using type = consume_Microsoft_Azure_SpatialAnchors_IAnchorLocateCriteria<D>;
    };
    template <typename D>
    struct consume_Microsoft_Azure_SpatialAnchors_IAnchorLocatedEventArgs
    {
        [[nodiscard]] WINRT_IMPL_AUTO(Microsoft::Azure::SpatialAnchors::CloudSpatialAnchor) Anchor() const;
        [[nodiscard]] WINRT_IMPL_AUTO(hstring) Identifier() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Microsoft::Azure::SpatialAnchors::LocateAnchorStatus) Status() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Microsoft::Azure::SpatialAnchors::LocateStrategy) Strategy() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Microsoft::Azure::SpatialAnchors::CloudSpatialAnchorWatcher) Watcher() const;
    };
    template <> struct consume<Microsoft::Azure::SpatialAnchors::IAnchorLocatedEventArgs>
    {
        template <typename D> using type = consume_Microsoft_Azure_SpatialAnchors_IAnchorLocatedEventArgs<D>;
    };
    template <typename D>
    struct consume_Microsoft_Azure_SpatialAnchors_ICloudSpatialAnchor
    {
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::Perception::Spatial::SpatialAnchor) LocalAnchor() const;
        WINRT_IMPL_AUTO(void) LocalAnchor(Windows::Perception::Spatial::SpatialAnchor const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::Foundation::DateTime) Expiration() const;
        WINRT_IMPL_AUTO(void) Expiration(Windows::Foundation::DateTime const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(hstring) Identifier() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::Foundation::Collections::IMap<hstring, hstring>) AppProperties() const;
        [[nodiscard]] WINRT_IMPL_AUTO(hstring) VersionTag() const;
    };
    template <> struct consume<Microsoft::Azure::SpatialAnchors::ICloudSpatialAnchor>
    {
        template <typename D> using type = consume_Microsoft_Azure_SpatialAnchors_ICloudSpatialAnchor<D>;
    };
    template <typename D>
    struct consume_Microsoft_Azure_SpatialAnchors_ICloudSpatialAnchorMap
    {
        [[nodiscard]] WINRT_IMPL_AUTO(hstring) Identifier() const;
        [[nodiscard]] WINRT_IMPL_AUTO(hstring) Name() const;
    };
    template <> struct consume<Microsoft::Azure::SpatialAnchors::ICloudSpatialAnchorMap>
    {
        template <typename D> using type = consume_Microsoft_Azure_SpatialAnchors_ICloudSpatialAnchorMap<D>;
    };
    template <typename D>
    struct consume_Microsoft_Azure_SpatialAnchors_ICloudSpatialAnchorSession
    {
        [[nodiscard]] WINRT_IMPL_AUTO(Microsoft::Azure::SpatialAnchors::SessionConfiguration) Configuration() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Microsoft::Azure::SpatialAnchors::CloudSpatialAnchorSessionDiagnostics) Diagnostics() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Microsoft::Azure::SpatialAnchors::SessionLogLevel) LogLevel() const;
        WINRT_IMPL_AUTO(void) LogLevel(Microsoft::Azure::SpatialAnchors::SessionLogLevel const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(Microsoft::Azure::SpatialAnchors::PlatformLocationProvider) LocationProvider() const;
        WINRT_IMPL_AUTO(void) LocationProvider(Microsoft::Azure::SpatialAnchors::PlatformLocationProvider const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(hstring) SessionId() const;
        WINRT_IMPL_AUTO(winrt::event_token) TokenRequired(Microsoft::Azure::SpatialAnchors::TokenRequiredDelegate const& handler) const;
        using TokenRequired_revoker = impl::event_revoker<Microsoft::Azure::SpatialAnchors::ICloudSpatialAnchorSession, &impl::abi_t<Microsoft::Azure::SpatialAnchors::ICloudSpatialAnchorSession>::remove_TokenRequired>;
        [[nodiscard]] TokenRequired_revoker TokenRequired(auto_revoke_t, Microsoft::Azure::SpatialAnchors::TokenRequiredDelegate const& handler) const;
        WINRT_IMPL_AUTO(void) TokenRequired(winrt::event_token const& token) const noexcept;
        WINRT_IMPL_AUTO(winrt::event_token) AnchorLocated(Microsoft::Azure::SpatialAnchors::AnchorLocatedDelegate const& handler) const;
        using AnchorLocated_revoker = impl::event_revoker<Microsoft::Azure::SpatialAnchors::ICloudSpatialAnchorSession, &impl::abi_t<Microsoft::Azure::SpatialAnchors::ICloudSpatialAnchorSession>::remove_AnchorLocated>;
        [[nodiscard]] AnchorLocated_revoker AnchorLocated(auto_revoke_t, Microsoft::Azure::SpatialAnchors::AnchorLocatedDelegate const& handler) const;
        WINRT_IMPL_AUTO(void) AnchorLocated(winrt::event_token const& token) const noexcept;
        WINRT_IMPL_AUTO(winrt::event_token) LocateAnchorsCompleted(Microsoft::Azure::SpatialAnchors::LocateAnchorsCompletedDelegate const& handler) const;
        using LocateAnchorsCompleted_revoker = impl::event_revoker<Microsoft::Azure::SpatialAnchors::ICloudSpatialAnchorSession, &impl::abi_t<Microsoft::Azure::SpatialAnchors::ICloudSpatialAnchorSession>::remove_LocateAnchorsCompleted>;
        [[nodiscard]] LocateAnchorsCompleted_revoker LocateAnchorsCompleted(auto_revoke_t, Microsoft::Azure::SpatialAnchors::LocateAnchorsCompletedDelegate const& handler) const;
        WINRT_IMPL_AUTO(void) LocateAnchorsCompleted(winrt::event_token const& token) const noexcept;
        WINRT_IMPL_AUTO(winrt::event_token) SessionUpdated(Microsoft::Azure::SpatialAnchors::SessionUpdatedDelegate const& handler) const;
        using SessionUpdated_revoker = impl::event_revoker<Microsoft::Azure::SpatialAnchors::ICloudSpatialAnchorSession, &impl::abi_t<Microsoft::Azure::SpatialAnchors::ICloudSpatialAnchorSession>::remove_SessionUpdated>;
        [[nodiscard]] SessionUpdated_revoker SessionUpdated(auto_revoke_t, Microsoft::Azure::SpatialAnchors::SessionUpdatedDelegate const& handler) const;
        WINRT_IMPL_AUTO(void) SessionUpdated(winrt::event_token const& token) const noexcept;
        WINRT_IMPL_AUTO(winrt::event_token) Error(Microsoft::Azure::SpatialAnchors::SessionErrorDelegate const& handler) const;
        using Error_revoker = impl::event_revoker<Microsoft::Azure::SpatialAnchors::ICloudSpatialAnchorSession, &impl::abi_t<Microsoft::Azure::SpatialAnchors::ICloudSpatialAnchorSession>::remove_Error>;
        [[nodiscard]] Error_revoker Error(auto_revoke_t, Microsoft::Azure::SpatialAnchors::SessionErrorDelegate const& handler) const;
        WINRT_IMPL_AUTO(void) Error(winrt::event_token const& token) const noexcept;
        WINRT_IMPL_AUTO(winrt::event_token) OnLogDebug(Microsoft::Azure::SpatialAnchors::OnLogDebugDelegate const& handler) const;
        using OnLogDebug_revoker = impl::event_revoker<Microsoft::Azure::SpatialAnchors::ICloudSpatialAnchorSession, &impl::abi_t<Microsoft::Azure::SpatialAnchors::ICloudSpatialAnchorSession>::remove_OnLogDebug>;
        [[nodiscard]] OnLogDebug_revoker OnLogDebug(auto_revoke_t, Microsoft::Azure::SpatialAnchors::OnLogDebugDelegate const& handler) const;
        WINRT_IMPL_AUTO(void) OnLogDebug(winrt::event_token const& token) const noexcept;
        WINRT_IMPL_AUTO(winrt::event_token) UpdatedSensorFingerprintRequired(Microsoft::Azure::SpatialAnchors::UpdatedSensorFingerprintRequiredDelegate const& handler) const;
        using UpdatedSensorFingerprintRequired_revoker = impl::event_revoker<Microsoft::Azure::SpatialAnchors::ICloudSpatialAnchorSession, &impl::abi_t<Microsoft::Azure::SpatialAnchors::ICloudSpatialAnchorSession>::remove_UpdatedSensorFingerprintRequired>;
        [[nodiscard]] UpdatedSensorFingerprintRequired_revoker UpdatedSensorFingerprintRequired(auto_revoke_t, Microsoft::Azure::SpatialAnchors::UpdatedSensorFingerprintRequiredDelegate const& handler) const;
        WINRT_IMPL_AUTO(void) UpdatedSensorFingerprintRequired(winrt::event_token const& token) const noexcept;
        WINRT_IMPL_AUTO(Windows::Foundation::IAsyncOperation<hstring>) GetAccessTokenWithAuthenticationTokenAsync(param::hstring const& authenticationToken) const;
        WINRT_IMPL_AUTO(Windows::Foundation::IAsyncOperation<hstring>) GetAccessTokenWithAccountKeyAsync(param::hstring const& accountKey) const;
        WINRT_IMPL_AUTO(Windows::Foundation::IAsyncAction) CreateAnchorAsync(Microsoft::Azure::SpatialAnchors::CloudSpatialAnchor const& anchor) const;
        WINRT_IMPL_AUTO(Microsoft::Azure::SpatialAnchors::CloudSpatialAnchorWatcher) CreateWatcher(Microsoft::Azure::SpatialAnchors::AnchorLocateCriteria const& criteria) const;
        WINRT_IMPL_AUTO(Windows::Foundation::IAsyncOperation<Microsoft::Azure::SpatialAnchors::CloudSpatialAnchor>) GetAnchorPropertiesAsync(param::hstring const& identifier) const;
        WINRT_IMPL_AUTO(Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVector<hstring>>) GetNearbyAnchorIdsAsync(Microsoft::Azure::SpatialAnchors::NearDeviceCriteria const& criteria) const;
        WINRT_IMPL_AUTO(Windows::Foundation::Collections::IVectorView<Microsoft::Azure::SpatialAnchors::CloudSpatialAnchorWatcher>) GetActiveWatchers() const;
        WINRT_IMPL_AUTO(Windows::Foundation::IAsyncAction) RefreshAnchorPropertiesAsync(Microsoft::Azure::SpatialAnchors::CloudSpatialAnchor const& anchor) const;
        WINRT_IMPL_AUTO(Windows::Foundation::IAsyncAction) UpdateAnchorPropertiesAsync(Microsoft::Azure::SpatialAnchors::CloudSpatialAnchor const& anchor) const;
        WINRT_IMPL_AUTO(Windows::Foundation::IAsyncAction) DeleteAnchorAsync(Microsoft::Azure::SpatialAnchors::CloudSpatialAnchor const& anchor) const;
        WINRT_IMPL_AUTO(Windows::Foundation::IAsyncOperation<Microsoft::Azure::SpatialAnchors::SessionStatus>) GetSessionStatusAsync() const;
        WINRT_IMPL_AUTO(void) Start() const;
        WINRT_IMPL_AUTO(void) Stop() const;
        WINRT_IMPL_AUTO(void) Reset() const;
        WINRT_IMPL_AUTO(void) Dispose() const;
    };
    template <> struct consume<Microsoft::Azure::SpatialAnchors::ICloudSpatialAnchorSession>
    {
        template <typename D> using type = consume_Microsoft_Azure_SpatialAnchors_ICloudSpatialAnchorSession<D>;
    };
    template <typename D>
    struct consume_Microsoft_Azure_SpatialAnchors_ICloudSpatialAnchorSessionDeferral
    {
        WINRT_IMPL_AUTO(void) Complete() const;
    };
    template <> struct consume<Microsoft::Azure::SpatialAnchors::ICloudSpatialAnchorSessionDeferral>
    {
        template <typename D> using type = consume_Microsoft_Azure_SpatialAnchors_ICloudSpatialAnchorSessionDeferral<D>;
    };
    template <typename D>
    struct consume_Microsoft_Azure_SpatialAnchors_ICloudSpatialAnchorSessionDiagnostics
    {
        [[nodiscard]] WINRT_IMPL_AUTO(Microsoft::Azure::SpatialAnchors::SessionLogLevel) LogLevel() const;
        WINRT_IMPL_AUTO(void) LogLevel(Microsoft::Azure::SpatialAnchors::SessionLogLevel const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(hstring) LogDirectory() const;
        WINRT_IMPL_AUTO(void) LogDirectory(param::hstring const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(int32_t) MaxDiskSizeInMB() const;
        WINRT_IMPL_AUTO(void) MaxDiskSizeInMB(int32_t value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(bool) ImagesEnabled() const;
        WINRT_IMPL_AUTO(void) ImagesEnabled(bool value) const;
        WINRT_IMPL_AUTO(Windows::Foundation::IAsyncOperation<hstring>) CreateManifestAsync(param::hstring const& description) const;
        WINRT_IMPL_AUTO(Windows::Foundation::IAsyncAction) SubmitManifestAsync(param::hstring const& manifestPath) const;
    };
    template <> struct consume<Microsoft::Azure::SpatialAnchors::ICloudSpatialAnchorSessionDiagnostics>
    {
        template <typename D> using type = consume_Microsoft_Azure_SpatialAnchors_ICloudSpatialAnchorSessionDiagnostics<D>;
    };
    template <typename D>
    struct consume_Microsoft_Azure_SpatialAnchors_ICloudSpatialAnchorWatcher
    {
        [[nodiscard]] WINRT_IMPL_AUTO(int32_t) Identifier() const;
        WINRT_IMPL_AUTO(void) Stop() const;
    };
    template <> struct consume<Microsoft::Azure::SpatialAnchors::ICloudSpatialAnchorWatcher>
    {
        template <typename D> using type = consume_Microsoft_Azure_SpatialAnchors_ICloudSpatialAnchorWatcher<D>;
    };
    template <typename D>
    struct consume_Microsoft_Azure_SpatialAnchors_IGeoLocation
    {
        [[nodiscard]] WINRT_IMPL_AUTO(double) Latitude() const;
        WINRT_IMPL_AUTO(void) Latitude(double value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(double) Longitude() const;
        WINRT_IMPL_AUTO(void) Longitude(double value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(float) HorizontalError() const;
        WINRT_IMPL_AUTO(void) HorizontalError(float value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(float) Altitude() const;
        WINRT_IMPL_AUTO(void) Altitude(float value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(float) VerticalError() const;
        WINRT_IMPL_AUTO(void) VerticalError(float value) const;
    };
    template <> struct consume<Microsoft::Azure::SpatialAnchors::IGeoLocation>
    {
        template <typename D> using type = consume_Microsoft_Azure_SpatialAnchors_IGeoLocation<D>;
    };
    template <typename D>
    struct consume_Microsoft_Azure_SpatialAnchors_ILocateAnchorsCompletedEventArgs
    {
        [[nodiscard]] WINRT_IMPL_AUTO(bool) Cancelled() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Microsoft::Azure::SpatialAnchors::CloudSpatialAnchorWatcher) Watcher() const;
    };
    template <> struct consume<Microsoft::Azure::SpatialAnchors::ILocateAnchorsCompletedEventArgs>
    {
        template <typename D> using type = consume_Microsoft_Azure_SpatialAnchors_ILocateAnchorsCompletedEventArgs<D>;
    };
    template <typename D>
    struct consume_Microsoft_Azure_SpatialAnchors_INearAnchorCriteria
    {
        [[nodiscard]] WINRT_IMPL_AUTO(Microsoft::Azure::SpatialAnchors::CloudSpatialAnchor) SourceAnchor() const;
        WINRT_IMPL_AUTO(void) SourceAnchor(Microsoft::Azure::SpatialAnchors::CloudSpatialAnchor const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(float) DistanceInMeters() const;
        WINRT_IMPL_AUTO(void) DistanceInMeters(float value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(int32_t) MaxResultCount() const;
        WINRT_IMPL_AUTO(void) MaxResultCount(int32_t value) const;
    };
    template <> struct consume<Microsoft::Azure::SpatialAnchors::INearAnchorCriteria>
    {
        template <typename D> using type = consume_Microsoft_Azure_SpatialAnchors_INearAnchorCriteria<D>;
    };
    template <typename D>
    struct consume_Microsoft_Azure_SpatialAnchors_INearDeviceCriteria
    {
        [[nodiscard]] WINRT_IMPL_AUTO(float) DistanceInMeters() const;
        WINRT_IMPL_AUTO(void) DistanceInMeters(float value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(int32_t) MaxResultCount() const;
        WINRT_IMPL_AUTO(void) MaxResultCount(int32_t value) const;
    };
    template <> struct consume<Microsoft::Azure::SpatialAnchors::INearDeviceCriteria>
    {
        template <typename D> using type = consume_Microsoft_Azure_SpatialAnchors_INearDeviceCriteria<D>;
    };
    template <typename D>
    struct consume_Microsoft_Azure_SpatialAnchors_IOnLogDebugEventArgs
    {
        [[nodiscard]] WINRT_IMPL_AUTO(hstring) Message() const;
    };
    template <> struct consume<Microsoft::Azure::SpatialAnchors::IOnLogDebugEventArgs>
    {
        template <typename D> using type = consume_Microsoft_Azure_SpatialAnchors_IOnLogDebugEventArgs<D>;
    };
    template <typename D>
    struct consume_Microsoft_Azure_SpatialAnchors_IPlatformLocationProvider
    {
        [[nodiscard]] WINRT_IMPL_AUTO(Microsoft::Azure::SpatialAnchors::SensorCapabilities) Sensors() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Microsoft::Azure::SpatialAnchors::GeoLocationStatusResult) GeoLocationStatus() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Microsoft::Azure::SpatialAnchors::WifiStatusResult) WifiStatus() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Microsoft::Azure::SpatialAnchors::BluetoothStatusResult) BluetoothStatus() const;
        WINRT_IMPL_AUTO(Microsoft::Azure::SpatialAnchors::GeoLocation) GetLocationEstimate() const;
        WINRT_IMPL_AUTO(void) Start() const;
        WINRT_IMPL_AUTO(void) Stop() const;
    };
    template <> struct consume<Microsoft::Azure::SpatialAnchors::IPlatformLocationProvider>
    {
        template <typename D> using type = consume_Microsoft_Azure_SpatialAnchors_IPlatformLocationProvider<D>;
    };
    template <typename D>
    struct consume_Microsoft_Azure_SpatialAnchors_ISensorCapabilities
    {
        [[nodiscard]] WINRT_IMPL_AUTO(bool) GeoLocationEnabled() const;
        WINRT_IMPL_AUTO(void) GeoLocationEnabled(bool value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(bool) WifiEnabled() const;
        WINRT_IMPL_AUTO(void) WifiEnabled(bool value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(bool) BluetoothEnabled() const;
        WINRT_IMPL_AUTO(void) BluetoothEnabled(bool value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(com_array<hstring>) KnownBeaconProximityUuids() const;
        WINRT_IMPL_AUTO(void) KnownBeaconProximityUuids(array_view<hstring const> value) const;
    };
    template <> struct consume<Microsoft::Azure::SpatialAnchors::ISensorCapabilities>
    {
        template <typename D> using type = consume_Microsoft_Azure_SpatialAnchors_ISensorCapabilities<D>;
    };
    template <typename D>
    struct consume_Microsoft_Azure_SpatialAnchors_ISensorFingerprintEventArgs
    {
        [[nodiscard]] WINRT_IMPL_AUTO(Microsoft::Azure::SpatialAnchors::GeoLocation) GeoPosition() const;
        WINRT_IMPL_AUTO(void) GeoPosition(Microsoft::Azure::SpatialAnchors::GeoLocation const& value) const;
    };
    template <> struct consume<Microsoft::Azure::SpatialAnchors::ISensorFingerprintEventArgs>
    {
        template <typename D> using type = consume_Microsoft_Azure_SpatialAnchors_ISensorFingerprintEventArgs<D>;
    };
    template <typename D>
    struct consume_Microsoft_Azure_SpatialAnchors_ISessionConfiguration
    {
        [[nodiscard]] WINRT_IMPL_AUTO(hstring) AccountDomain() const;
        WINRT_IMPL_AUTO(void) AccountDomain(param::hstring const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(hstring) AccountId() const;
        WINRT_IMPL_AUTO(void) AccountId(param::hstring const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(hstring) AuthenticationToken() const;
        WINRT_IMPL_AUTO(void) AuthenticationToken(param::hstring const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(hstring) AccountKey() const;
        WINRT_IMPL_AUTO(void) AccountKey(param::hstring const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(hstring) AccessToken() const;
        WINRT_IMPL_AUTO(void) AccessToken(param::hstring const& value) const;
    };
    template <> struct consume<Microsoft::Azure::SpatialAnchors::ISessionConfiguration>
    {
        template <typename D> using type = consume_Microsoft_Azure_SpatialAnchors_ISessionConfiguration<D>;
    };
    template <typename D>
    struct consume_Microsoft_Azure_SpatialAnchors_ISessionErrorEventArgs
    {
        [[nodiscard]] WINRT_IMPL_AUTO(Microsoft::Azure::SpatialAnchors::CloudSpatialErrorCode) ErrorCode() const;
        [[nodiscard]] WINRT_IMPL_AUTO(hstring) ErrorMessage() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Microsoft::Azure::SpatialAnchors::CloudSpatialAnchorWatcher) Watcher() const;
    };
    template <> struct consume<Microsoft::Azure::SpatialAnchors::ISessionErrorEventArgs>
    {
        template <typename D> using type = consume_Microsoft_Azure_SpatialAnchors_ISessionErrorEventArgs<D>;
    };
    template <typename D>
    struct consume_Microsoft_Azure_SpatialAnchors_ISessionStatus
    {
        [[nodiscard]] WINRT_IMPL_AUTO(float) ReadyForCreateProgress() const;
        [[nodiscard]] WINRT_IMPL_AUTO(float) RecommendedForCreateProgress() const;
        [[nodiscard]] WINRT_IMPL_AUTO(int32_t) SessionCreateHash() const;
        [[nodiscard]] WINRT_IMPL_AUTO(int32_t) SessionLocateHash() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Microsoft::Azure::SpatialAnchors::SessionUserFeedback) UserFeedback() const;
    };
    template <> struct consume<Microsoft::Azure::SpatialAnchors::ISessionStatus>
    {
        template <typename D> using type = consume_Microsoft_Azure_SpatialAnchors_ISessionStatus<D>;
    };
    template <typename D>
    struct consume_Microsoft_Azure_SpatialAnchors_ISessionUpdatedEventArgs
    {
        [[nodiscard]] WINRT_IMPL_AUTO(Microsoft::Azure::SpatialAnchors::SessionStatus) Status() const;
    };
    template <> struct consume<Microsoft::Azure::SpatialAnchors::ISessionUpdatedEventArgs>
    {
        template <typename D> using type = consume_Microsoft_Azure_SpatialAnchors_ISessionUpdatedEventArgs<D>;
    };
    template <typename D>
    struct consume_Microsoft_Azure_SpatialAnchors_ITokenRequiredEventArgs
    {
        [[nodiscard]] WINRT_IMPL_AUTO(hstring) AccessToken() const;
        WINRT_IMPL_AUTO(void) AccessToken(param::hstring const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(hstring) AuthenticationToken() const;
        WINRT_IMPL_AUTO(void) AuthenticationToken(param::hstring const& value) const;
        WINRT_IMPL_AUTO(Microsoft::Azure::SpatialAnchors::CloudSpatialAnchorSessionDeferral) GetDeferral() const;
    };
    template <> struct consume<Microsoft::Azure::SpatialAnchors::ITokenRequiredEventArgs>
    {
        template <typename D> using type = consume_Microsoft_Azure_SpatialAnchors_ITokenRequiredEventArgs<D>;
    };
}
#endif
