// WARNING: Please don't edit this file. It was generated by C++/WinRT v2.0.201217.4

#ifndef WINRT_Windows_Networking_PushNotifications_2_H
#define WINRT_Windows_Networking_PushNotifications_2_H
#include "winrt/impl/Windows.System.1.h"
#include "winrt/impl/Windows.Networking.PushNotifications.1.h"
WINRT_EXPORT namespace winrt::Windows::Networking::PushNotifications
{
    struct __declspec(empty_bases) PushNotificationChannel : Windows::Networking::PushNotifications::IPushNotificationChannel
    {
        PushNotificationChannel(std::nullptr_t) noexcept {}
        PushNotificationChannel(void* ptr, take_ownership_from_abi_t) noexcept : Windows::Networking::PushNotifications::IPushNotificationChannel(ptr, take_ownership_from_abi) {}
        PushNotificationChannel(PushNotificationChannel const&) noexcept = default;
        PushNotificationChannel(PushNotificationChannel&&) noexcept = default;
        PushNotificationChannel& operator=(PushNotificationChannel const&) & noexcept = default;
        PushNotificationChannel& operator=(PushNotificationChannel&&) & noexcept = default;
    };
    struct PushNotificationChannelManager
    {
        PushNotificationChannelManager() = delete;
        static auto CreatePushNotificationChannelForApplicationAsync();
        static auto CreatePushNotificationChannelForApplicationAsync(param::hstring const& applicationId);
        static auto CreatePushNotificationChannelForSecondaryTileAsync(param::hstring const& tileId);
        static auto GetForUser(Windows::System::User const& user);
        static auto GetDefault();
    };
    struct __declspec(empty_bases) PushNotificationChannelManagerForUser : Windows::Networking::PushNotifications::IPushNotificationChannelManagerForUser,
        impl::require<PushNotificationChannelManagerForUser, Windows::Networking::PushNotifications::IPushNotificationChannelManagerForUser2>
    {
        PushNotificationChannelManagerForUser(std::nullptr_t) noexcept {}
        PushNotificationChannelManagerForUser(void* ptr, take_ownership_from_abi_t) noexcept : Windows::Networking::PushNotifications::IPushNotificationChannelManagerForUser(ptr, take_ownership_from_abi) {}
        PushNotificationChannelManagerForUser(PushNotificationChannelManagerForUser const&) noexcept = default;
        PushNotificationChannelManagerForUser(PushNotificationChannelManagerForUser&&) noexcept = default;
        PushNotificationChannelManagerForUser& operator=(PushNotificationChannelManagerForUser const&) & noexcept = default;
        PushNotificationChannelManagerForUser& operator=(PushNotificationChannelManagerForUser&&) & noexcept = default;
    };
    struct __declspec(empty_bases) PushNotificationReceivedEventArgs : Windows::Networking::PushNotifications::IPushNotificationReceivedEventArgs
    {
        PushNotificationReceivedEventArgs(std::nullptr_t) noexcept {}
        PushNotificationReceivedEventArgs(void* ptr, take_ownership_from_abi_t) noexcept : Windows::Networking::PushNotifications::IPushNotificationReceivedEventArgs(ptr, take_ownership_from_abi) {}
        PushNotificationReceivedEventArgs(PushNotificationReceivedEventArgs const&) noexcept = default;
        PushNotificationReceivedEventArgs(PushNotificationReceivedEventArgs&&) noexcept = default;
        PushNotificationReceivedEventArgs& operator=(PushNotificationReceivedEventArgs const&) & noexcept = default;
        PushNotificationReceivedEventArgs& operator=(PushNotificationReceivedEventArgs&&) & noexcept = default;
    };
    struct __declspec(empty_bases) RawNotification : Windows::Networking::PushNotifications::IRawNotification,
        impl::require<RawNotification, Windows::Networking::PushNotifications::IRawNotification2>
    {
        RawNotification(std::nullptr_t) noexcept {}
        RawNotification(void* ptr, take_ownership_from_abi_t) noexcept : Windows::Networking::PushNotifications::IRawNotification(ptr, take_ownership_from_abi) {}
        RawNotification(RawNotification const&) noexcept = default;
        RawNotification(RawNotification&&) noexcept = default;
        RawNotification& operator=(RawNotification const&) & noexcept = default;
        RawNotification& operator=(RawNotification&&) & noexcept = default;
    };
}
#endif
