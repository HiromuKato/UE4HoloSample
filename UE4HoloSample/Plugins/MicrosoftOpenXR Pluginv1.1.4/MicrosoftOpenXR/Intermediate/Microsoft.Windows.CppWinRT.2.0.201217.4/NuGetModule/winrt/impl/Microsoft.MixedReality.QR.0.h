// WARNING: Please don't edit this file. It was generated by C++/WinRT v2.0.201217.4

#ifndef WINRT_Microsoft_MixedReality_QR_0_H
#define WINRT_Microsoft_MixedReality_QR_0_H
WINRT_EXPORT namespace winrt::Windows::Foundation
{
    struct EventRegistrationToken;
    template <typename TResult> struct __declspec(empty_bases) IAsyncOperation;
    template <typename TSender, typename TResult> struct __declspec(empty_bases) TypedEventHandler;
}
WINRT_EXPORT namespace winrt::Windows::Foundation::Collections
{
    template <typename T> struct __declspec(empty_bases) IVectorView;
}
WINRT_EXPORT namespace winrt::Microsoft::MixedReality::QR
{
    enum class QRCodeWatcherAccessStatus : int32_t
    {
        DeniedBySystem = 0,
        NotDeclaredByApp = 1,
        DeniedByUser = 2,
        UserPromptRequired = 3,
        Allowed = 4,
    };
    enum class QRVersion : int32_t
    {
        QR1 = 1,
        QR2 = 2,
        QR3 = 3,
        QR4 = 4,
        QR5 = 5,
        QR6 = 6,
        QR7 = 7,
        QR8 = 8,
        QR9 = 9,
        QR10 = 10,
        QR11 = 11,
        QR12 = 12,
        QR13 = 13,
        QR14 = 14,
        QR15 = 15,
        QR16 = 16,
        QR17 = 17,
        QR18 = 18,
        QR19 = 19,
        QR20 = 20,
        QR21 = 21,
        QR22 = 22,
        QR23 = 23,
        QR24 = 24,
        QR25 = 25,
        QR26 = 26,
        QR27 = 27,
        QR28 = 28,
        QR29 = 29,
        QR30 = 30,
        QR31 = 31,
        QR32 = 32,
        QR33 = 33,
        QR34 = 34,
        QR35 = 35,
        QR36 = 36,
        QR37 = 37,
        QR38 = 38,
        QR39 = 39,
        QR40 = 40,
        MicroQRM1 = 41,
        MicroQRM2 = 42,
        MicroQRM3 = 43,
        MicroQRM4 = 44,
    };
    struct IQRCode;
    struct IQRCodeAddedEventArgs;
    struct IQRCodeRemovedEventArgs;
    struct IQRCodeUpdatedEventArgs;
    struct IQRCodeWatcher;
    struct IQRCodeWatcherStatics;
    struct QRCode;
    struct QRCodeAddedEventArgs;
    struct QRCodeRemovedEventArgs;
    struct QRCodeUpdatedEventArgs;
    struct QRCodeWatcher;
}
namespace winrt::impl
{
    template <> struct category<Microsoft::MixedReality::QR::IQRCode>{ using type = interface_category; };
    template <> struct category<Microsoft::MixedReality::QR::IQRCodeAddedEventArgs>{ using type = interface_category; };
    template <> struct category<Microsoft::MixedReality::QR::IQRCodeRemovedEventArgs>{ using type = interface_category; };
    template <> struct category<Microsoft::MixedReality::QR::IQRCodeUpdatedEventArgs>{ using type = interface_category; };
    template <> struct category<Microsoft::MixedReality::QR::IQRCodeWatcher>{ using type = interface_category; };
    template <> struct category<Microsoft::MixedReality::QR::IQRCodeWatcherStatics>{ using type = interface_category; };
    template <> struct category<Microsoft::MixedReality::QR::QRCode>{ using type = class_category; };
    template <> struct category<Microsoft::MixedReality::QR::QRCodeAddedEventArgs>{ using type = class_category; };
    template <> struct category<Microsoft::MixedReality::QR::QRCodeRemovedEventArgs>{ using type = class_category; };
    template <> struct category<Microsoft::MixedReality::QR::QRCodeUpdatedEventArgs>{ using type = class_category; };
    template <> struct category<Microsoft::MixedReality::QR::QRCodeWatcher>{ using type = class_category; };
    template <> struct category<Microsoft::MixedReality::QR::QRCodeWatcherAccessStatus>{ using type = enum_category; };
    template <> struct category<Microsoft::MixedReality::QR::QRVersion>{ using type = enum_category; };
    template <> inline constexpr auto& name_v<Microsoft::MixedReality::QR::QRCode> = L"Microsoft.MixedReality.QR.QRCode";
    template <> inline constexpr auto& name_v<Microsoft::MixedReality::QR::QRCodeAddedEventArgs> = L"Microsoft.MixedReality.QR.QRCodeAddedEventArgs";
    template <> inline constexpr auto& name_v<Microsoft::MixedReality::QR::QRCodeRemovedEventArgs> = L"Microsoft.MixedReality.QR.QRCodeRemovedEventArgs";
    template <> inline constexpr auto& name_v<Microsoft::MixedReality::QR::QRCodeUpdatedEventArgs> = L"Microsoft.MixedReality.QR.QRCodeUpdatedEventArgs";
    template <> inline constexpr auto& name_v<Microsoft::MixedReality::QR::QRCodeWatcher> = L"Microsoft.MixedReality.QR.QRCodeWatcher";
    template <> inline constexpr auto& name_v<Microsoft::MixedReality::QR::QRCodeWatcherAccessStatus> = L"Microsoft.MixedReality.QR.QRCodeWatcherAccessStatus";
    template <> inline constexpr auto& name_v<Microsoft::MixedReality::QR::QRVersion> = L"Microsoft.MixedReality.QR.QRVersion";
    template <> inline constexpr auto& name_v<Microsoft::MixedReality::QR::IQRCode> = L"Microsoft.MixedReality.QR.IQRCode";
    template <> inline constexpr auto& name_v<Microsoft::MixedReality::QR::IQRCodeAddedEventArgs> = L"Microsoft.MixedReality.QR.IQRCodeAddedEventArgs";
    template <> inline constexpr auto& name_v<Microsoft::MixedReality::QR::IQRCodeRemovedEventArgs> = L"Microsoft.MixedReality.QR.IQRCodeRemovedEventArgs";
    template <> inline constexpr auto& name_v<Microsoft::MixedReality::QR::IQRCodeUpdatedEventArgs> = L"Microsoft.MixedReality.QR.IQRCodeUpdatedEventArgs";
    template <> inline constexpr auto& name_v<Microsoft::MixedReality::QR::IQRCodeWatcher> = L"Microsoft.MixedReality.QR.IQRCodeWatcher";
    template <> inline constexpr auto& name_v<Microsoft::MixedReality::QR::IQRCodeWatcherStatics> = L"Microsoft.MixedReality.QR.IQRCodeWatcherStatics";
    template <> inline constexpr guid guid_v<Microsoft::MixedReality::QR::IQRCode>{ 0x2770A5C5,0x82E9,0x5662,{ 0xA7,0x05,0x9E,0xFD,0x95,0xCF,0xCE,0xD6 } }; // 2770A5C5-82E9-5662-A705-9EFD95CFCED6
    template <> inline constexpr guid guid_v<Microsoft::MixedReality::QR::IQRCodeAddedEventArgs>{ 0x44F1F9C1,0x005B,0x5984,{ 0x85,0x67,0x20,0x96,0xAE,0x6E,0x41,0x6A } }; // 44F1F9C1-005B-5984-8567-2096AE6E416A
    template <> inline constexpr guid guid_v<Microsoft::MixedReality::QR::IQRCodeRemovedEventArgs>{ 0xCA1530E0,0x4D3E,0x52F1,{ 0xB6,0x4E,0x90,0x30,0xC1,0x33,0x04,0x77 } }; // CA1530E0-4D3E-52F1-B64E-9030C1330477
    template <> inline constexpr guid guid_v<Microsoft::MixedReality::QR::IQRCodeUpdatedEventArgs>{ 0xBC8B4D8A,0xEAB8,0x50B8,{ 0x9D,0x57,0x58,0x0C,0xF1,0x37,0x3E,0x87 } }; // BC8B4D8A-EAB8-50B8-9D57-580CF1373E87
    template <> inline constexpr guid guid_v<Microsoft::MixedReality::QR::IQRCodeWatcher>{ 0x9BB517F9,0x4B03,0x5FC4,{ 0x8E,0x3F,0xE6,0x20,0x67,0xE2,0xB6,0x82 } }; // 9BB517F9-4B03-5FC4-8E3F-E62067E2B682
    template <> inline constexpr guid guid_v<Microsoft::MixedReality::QR::IQRCodeWatcherStatics>{ 0x5ECC68C4,0x158B,0x5A86,{ 0xAA,0xE8,0xC9,0x7C,0x31,0xC3,0x3B,0xC8 } }; // 5ECC68C4-158B-5A86-AAE8-C97C31C33BC8
    template <> struct default_interface<Microsoft::MixedReality::QR::QRCode>{ using type = Microsoft::MixedReality::QR::IQRCode; };
    template <> struct default_interface<Microsoft::MixedReality::QR::QRCodeAddedEventArgs>{ using type = Microsoft::MixedReality::QR::IQRCodeAddedEventArgs; };
    template <> struct default_interface<Microsoft::MixedReality::QR::QRCodeRemovedEventArgs>{ using type = Microsoft::MixedReality::QR::IQRCodeRemovedEventArgs; };
    template <> struct default_interface<Microsoft::MixedReality::QR::QRCodeUpdatedEventArgs>{ using type = Microsoft::MixedReality::QR::IQRCodeUpdatedEventArgs; };
    template <> struct default_interface<Microsoft::MixedReality::QR::QRCodeWatcher>{ using type = Microsoft::MixedReality::QR::IQRCodeWatcher; };
    template <> struct abi<Microsoft::MixedReality::QR::IQRCode>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_Id(winrt::guid*) noexcept = 0;
            virtual int32_t __stdcall get_SpatialGraphNodeId(winrt::guid*) noexcept = 0;
            virtual int32_t __stdcall get_Version(int32_t*) noexcept = 0;
            virtual int32_t __stdcall get_PhysicalSideLength(float*) noexcept = 0;
            virtual int32_t __stdcall get_SystemRelativeLastDetectedTime(int64_t*) noexcept = 0;
            virtual int32_t __stdcall get_LastDetectedTime(int64_t*) noexcept = 0;
            virtual int32_t __stdcall get_Data(void**) noexcept = 0;
            virtual int32_t __stdcall get_RawDataSize(uint32_t*) noexcept = 0;
            virtual int32_t __stdcall GetRawData(uint32_t, uint8_t*) noexcept = 0;
        };
    };
    template <> struct abi<Microsoft::MixedReality::QR::IQRCodeAddedEventArgs>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_Code(void**) noexcept = 0;
        };
    };
    template <> struct abi<Microsoft::MixedReality::QR::IQRCodeRemovedEventArgs>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_Code(void**) noexcept = 0;
        };
    };
    template <> struct abi<Microsoft::MixedReality::QR::IQRCodeUpdatedEventArgs>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_Code(void**) noexcept = 0;
        };
    };
    template <> struct abi<Microsoft::MixedReality::QR::IQRCodeWatcher>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall add_Added(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_Added(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_Updated(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_Updated(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_Removed(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_Removed(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_EnumerationCompleted(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_EnumerationCompleted(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall Start() noexcept = 0;
            virtual int32_t __stdcall Stop() noexcept = 0;
            virtual int32_t __stdcall GetList(void**) noexcept = 0;
        };
    };
    template <> struct abi<Microsoft::MixedReality::QR::IQRCodeWatcherStatics>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall IsSupported(bool*) noexcept = 0;
            virtual int32_t __stdcall RequestAccessAsync(void**) noexcept = 0;
        };
    };
    template <typename D>
    struct consume_Microsoft_MixedReality_QR_IQRCode
    {
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::guid) Id() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::guid) SpatialGraphNodeId() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Microsoft::MixedReality::QR::QRVersion) Version() const;
        [[nodiscard]] WINRT_IMPL_AUTO(float) PhysicalSideLength() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::Foundation::TimeSpan) SystemRelativeLastDetectedTime() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::Foundation::DateTime) LastDetectedTime() const;
        [[nodiscard]] WINRT_IMPL_AUTO(hstring) Data() const;
        [[nodiscard]] WINRT_IMPL_AUTO(uint32_t) RawDataSize() const;
        WINRT_IMPL_AUTO(void) GetRawData(array_view<uint8_t> buffer) const;
    };
    template <> struct consume<Microsoft::MixedReality::QR::IQRCode>
    {
        template <typename D> using type = consume_Microsoft_MixedReality_QR_IQRCode<D>;
    };
    template <typename D>
    struct consume_Microsoft_MixedReality_QR_IQRCodeAddedEventArgs
    {
        [[nodiscard]] WINRT_IMPL_AUTO(Microsoft::MixedReality::QR::QRCode) Code() const;
    };
    template <> struct consume<Microsoft::MixedReality::QR::IQRCodeAddedEventArgs>
    {
        template <typename D> using type = consume_Microsoft_MixedReality_QR_IQRCodeAddedEventArgs<D>;
    };
    template <typename D>
    struct consume_Microsoft_MixedReality_QR_IQRCodeRemovedEventArgs
    {
        [[nodiscard]] WINRT_IMPL_AUTO(Microsoft::MixedReality::QR::QRCode) Code() const;
    };
    template <> struct consume<Microsoft::MixedReality::QR::IQRCodeRemovedEventArgs>
    {
        template <typename D> using type = consume_Microsoft_MixedReality_QR_IQRCodeRemovedEventArgs<D>;
    };
    template <typename D>
    struct consume_Microsoft_MixedReality_QR_IQRCodeUpdatedEventArgs
    {
        [[nodiscard]] WINRT_IMPL_AUTO(Microsoft::MixedReality::QR::QRCode) Code() const;
    };
    template <> struct consume<Microsoft::MixedReality::QR::IQRCodeUpdatedEventArgs>
    {
        template <typename D> using type = consume_Microsoft_MixedReality_QR_IQRCodeUpdatedEventArgs<D>;
    };
    template <typename D>
    struct consume_Microsoft_MixedReality_QR_IQRCodeWatcher
    {
        WINRT_IMPL_AUTO(winrt::event_token) Added(Windows::Foundation::TypedEventHandler<Microsoft::MixedReality::QR::QRCodeWatcher, Microsoft::MixedReality::QR::QRCodeAddedEventArgs> const& handler) const;
        using Added_revoker = impl::event_revoker<Microsoft::MixedReality::QR::IQRCodeWatcher, &impl::abi_t<Microsoft::MixedReality::QR::IQRCodeWatcher>::remove_Added>;
        [[nodiscard]] Added_revoker Added(auto_revoke_t, Windows::Foundation::TypedEventHandler<Microsoft::MixedReality::QR::QRCodeWatcher, Microsoft::MixedReality::QR::QRCodeAddedEventArgs> const& handler) const;
        WINRT_IMPL_AUTO(void) Added(winrt::event_token const& token) const noexcept;
        WINRT_IMPL_AUTO(winrt::event_token) Updated(Windows::Foundation::TypedEventHandler<Microsoft::MixedReality::QR::QRCodeWatcher, Microsoft::MixedReality::QR::QRCodeUpdatedEventArgs> const& handler) const;
        using Updated_revoker = impl::event_revoker<Microsoft::MixedReality::QR::IQRCodeWatcher, &impl::abi_t<Microsoft::MixedReality::QR::IQRCodeWatcher>::remove_Updated>;
        [[nodiscard]] Updated_revoker Updated(auto_revoke_t, Windows::Foundation::TypedEventHandler<Microsoft::MixedReality::QR::QRCodeWatcher, Microsoft::MixedReality::QR::QRCodeUpdatedEventArgs> const& handler) const;
        WINRT_IMPL_AUTO(void) Updated(winrt::event_token const& token) const noexcept;
        WINRT_IMPL_AUTO(winrt::event_token) Removed(Windows::Foundation::TypedEventHandler<Microsoft::MixedReality::QR::QRCodeWatcher, Microsoft::MixedReality::QR::QRCodeRemovedEventArgs> const& handler) const;
        using Removed_revoker = impl::event_revoker<Microsoft::MixedReality::QR::IQRCodeWatcher, &impl::abi_t<Microsoft::MixedReality::QR::IQRCodeWatcher>::remove_Removed>;
        [[nodiscard]] Removed_revoker Removed(auto_revoke_t, Windows::Foundation::TypedEventHandler<Microsoft::MixedReality::QR::QRCodeWatcher, Microsoft::MixedReality::QR::QRCodeRemovedEventArgs> const& handler) const;
        WINRT_IMPL_AUTO(void) Removed(winrt::event_token const& token) const noexcept;
        WINRT_IMPL_AUTO(winrt::event_token) EnumerationCompleted(Windows::Foundation::TypedEventHandler<Microsoft::MixedReality::QR::QRCodeWatcher, Windows::Foundation::IInspectable> const& handler) const;
        using EnumerationCompleted_revoker = impl::event_revoker<Microsoft::MixedReality::QR::IQRCodeWatcher, &impl::abi_t<Microsoft::MixedReality::QR::IQRCodeWatcher>::remove_EnumerationCompleted>;
        [[nodiscard]] EnumerationCompleted_revoker EnumerationCompleted(auto_revoke_t, Windows::Foundation::TypedEventHandler<Microsoft::MixedReality::QR::QRCodeWatcher, Windows::Foundation::IInspectable> const& handler) const;
        WINRT_IMPL_AUTO(void) EnumerationCompleted(winrt::event_token const& token) const noexcept;
        WINRT_IMPL_AUTO(void) Start() const;
        WINRT_IMPL_AUTO(void) Stop() const;
        WINRT_IMPL_AUTO(Windows::Foundation::Collections::IVectorView<Microsoft::MixedReality::QR::QRCode>) GetList() const;
    };
    template <> struct consume<Microsoft::MixedReality::QR::IQRCodeWatcher>
    {
        template <typename D> using type = consume_Microsoft_MixedReality_QR_IQRCodeWatcher<D>;
    };
    template <typename D>
    struct consume_Microsoft_MixedReality_QR_IQRCodeWatcherStatics
    {
        WINRT_IMPL_AUTO(bool) IsSupported() const;
        WINRT_IMPL_AUTO(Windows::Foundation::IAsyncOperation<Microsoft::MixedReality::QR::QRCodeWatcherAccessStatus>) RequestAccessAsync() const;
    };
    template <> struct consume<Microsoft::MixedReality::QR::IQRCodeWatcherStatics>
    {
        template <typename D> using type = consume_Microsoft_MixedReality_QR_IQRCodeWatcherStatics<D>;
    };
}
#endif
